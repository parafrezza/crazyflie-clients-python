{"params": {"activeMarker": {"desc": "The Active Marker deck is mainly designed for Qualisys mocap systems and supports Qualisys Active markers, but it can also be used with other systems in a simplified mode. The deck has 4 arms with one IR LED on the tip of each arm and a light sensor in the center of the deck.\n\nThe deck is configured using the parameter sub system, for details on which parameter to use, see below. ", "variables": {"front": {"core": true, "short_desc": "Qualisys id of marker for front (default: 1) ", "type": "PARAM_UINT8, PARAM_PERSISTENT", "desc": "In Qualisys mode the front LED act as an Active marker with IDs that are in the range 0 - 170. "}, "back": {"core": true, "short_desc": "Qualisys id of marker for back (default: 3) ", "type": "PARAM_UINT8, PARAM_PERSISTENT", "desc": "In Qualisys mode the back LED act as an Active marker with IDs that are in the range 0 - 170. "}, "left": {"core": true, "short_desc": "Qualisys id of marker for left (default: 4) ", "type": "PARAM_UINT8, PARAM_PERSISTENT", "desc": "In Qualisys mode the left LED act as an Active marker with IDs that are in the range 0 - 170. "}, "right": {"core": true, "short_desc": "Qualisys id of marker for right (default: 2) ", "type": "PARAM_UINT8, PARAM_PERSISTENT", "desc": "In Qualisys mode the right LED act as an Active marker with IDs that are in the range 0 - 170. "}, "mode": {"core": true, "short_desc": "Off(0), pwm(1), modulated(2) or qualisys(3) ", "type": "PARAM_UINT8, PARAM_PERSISTENT", "desc": "| Mode | Value | Comment | \n| - | - | - | \n| OFF | 0 | Always off | \n| PWM | 1 | Always on, PWM modulated | \n| MODULATED | 2 | Switching | \n| QUALISYS | 3 (default) | Qualisys Active Marker mode | \n\n\n### Off mode\n\nAll marker LEDs are turned off.\n\n### PWM mode\n\nThe marker LEDs are turned on and PWM modulated. The brightness of each LED is controlled by the marker parameters below, in the range 0 - 255.\n\n### Modulated mode\n\nThe LEDs are switched on and off at around 42 kHz (24 micro seconds cycle). The brightness of the LEDs during the \u201con\u201d part of the cycle is controlled by the marker parameters below, in the range 0 - 255.\n\n### Qualisys mode\n\nIn this mode the LEDs act as Active markers with IDs that are identified by the Qualisys system and used for better 6-dof identification and tracking. The IDs are controlled by the marker parameters. The Qualisys systems and the deck currently supports IDs in the range [0 - 170] "}, "poll": {"core": false, "short_desc": "", "type": "PARAM_UINT8", "desc": ""}}}, "amarkUartTest": {"desc": "", "variables": {"trigger": {"core": false, "short_desc": "", "type": "PARAM_UINT8", "desc": ""}}}, "BigQuadTest": {"desc": "", "variables": {"pass": {"core": false, "short_desc": "", "type": "PARAM_UINT8", "desc": ""}}}, "commander": {"desc": "The high level commander handles the setpoints from within the firmware based on a predefined trajectory. This was merged as part of the [Crazyswarm](https://crazyswarm.readthedocs.io/en/latest/) project of the [USC ACT lab](https://act.usc.edu/) (see this [blogpost](https://www.bitcraze.io/2018/02/merging-crazyswarm-functionality-into-the-official-crazyflie-firmware/)). The high-level commander uses a planner to generate smooth trajectories based on actions like \u2018take off\u2019, \u2018go to\u2019 or \u2018land\u2019 with 7th order polynomials. The planner generates a group of setpoints, which will be handled by the High level commander and send one by one to the commander framework.\n\nIt is also possible to upload your own custom trajectory to the memory of the Crazyflie, which you can try out with the script `examples/autonomous_sequence_high_level of.py` in the Crazyflie python library repository. ", "variables": {"enHighLevel": {"core": true, "short_desc": "Enable high level commander. ", "type": "PARAM_UINT8", "desc": ""}}}, "cppm": {"desc": "The CPPM (Combined Pulse Position Modulation) parameters configure the maximum angle/rate output given a maximum stick input for CRTP packets with emulated CPPM channels (e.g. RC transmitters connecting directly to the NRF radio, often with a 4-in-1 Multimodule), or for CPPM channels from an external receiver. ", "variables": {"rateRoll": {"core": false, "short_desc": "Config of max roll rate at max stick input [DPS] (default: 720) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "ratePitch": {"core": false, "short_desc": "Config of max pitch rate at max stick input [DPS] (default: 720) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "angPitch": {"core": false, "short_desc": "Config of max pitch angle at max stick input [DEG] (default: 50) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "angRoll": {"core": false, "short_desc": "Config of max roll angle at max stick input [DEG] (default: 50) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "rateYaw": {"core": false, "short_desc": "Config of max yaw rate at max stick input [DPS] (default: 400) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}}}, "cpu": {"desc": "This parameter group contain read-only parameters pertaining to the CPU in the Crazyflie.\n\nThese could be used to identify an unique quad. ", "variables": {"flash": {"core": true, "short_desc": "Size in kB of the device flash memory. ", "type": "PARAM_UINT16, PARAM_RONLY", "desc": ""}, "id0": {"core": true, "short_desc": "Byte `0 - 3` of device unique id. ", "type": "PARAM_UINT32, PARAM_RONLY", "desc": ""}, "id1": {"core": true, "short_desc": "Byte `4 - 7` of device unique id. ", "type": "PARAM_UINT32, PARAM_RONLY", "desc": ""}, "id2": {"core": true, "short_desc": "Byte `8 - 11` of device unique id. ", "type": "PARAM_UINT32, PARAM_RONLY", "desc": ""}}}, "crtpsrv": {"desc": "", "variables": {"echoDelay": {"core": false, "short_desc": "", "type": "PARAM_UINT16", "desc": ""}}}, "ctrlAtt": {"desc": "", "variables": {"tau_xy": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "zeta_xy": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "tau_z": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "zeta_z": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "tau_rp": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "mixing_factor": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "coll_fairness": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}}}, "ctrlINDI": {"desc": "Tuning settings for INDI controller for the attitude and accelerations of the Crazyflie ", "variables": {"thrust_threshold": {"core": false, "short_desc": "INDI Minimum thrust threshold [motor units]. ", "type": "PARAM_FLOAT", "desc": ""}, "bound_ctrl_input": {"core": false, "short_desc": "INDI bounding for control input [motor units]. ", "type": "PARAM_FLOAT", "desc": ""}, "g1_p": {"core": false, "short_desc": "INDI Controller effeciveness G1 p. ", "type": "PARAM_FLOAT", "desc": ""}, "g1_q": {"core": false, "short_desc": "INDI Controller effectiveness G1 q. ", "type": "PARAM_FLOAT", "desc": ""}, "g1_r": {"core": false, "short_desc": "INDI Controller effectiveness G1 r. ", "type": "PARAM_FLOAT", "desc": ""}, "g2": {"core": false, "short_desc": "INDI Controller effectiveness G2. ", "type": "PARAM_FLOAT", "desc": ""}, "ref_err_p": {"core": false, "short_desc": "INDI proportional gain, attitude error p. ", "type": "PARAM_FLOAT", "desc": ""}, "ref_err_q": {"core": false, "short_desc": "INDI proportional gain, attitude error q. ", "type": "PARAM_FLOAT", "desc": ""}, "ref_err_r": {"core": false, "short_desc": "INDI proportional gain, attitude error r. ", "type": "PARAM_FLOAT", "desc": ""}, "ref_rate_p": {"core": false, "short_desc": "INDI proportional gain, attitude rate error p. ", "type": "PARAM_FLOAT", "desc": ""}, "ref_rate_q": {"core": false, "short_desc": "INDI proportional gain, attitude rate error q. ", "type": "PARAM_FLOAT", "desc": ""}, "ref_rate_r": {"core": false, "short_desc": "INDI proportional gain, attitude rate error r. ", "type": "PARAM_FLOAT", "desc": ""}, "act_dyn_p": {"core": false, "short_desc": "INDI actuator dynamics parameter p. ", "type": "PARAM_FLOAT", "desc": ""}, "act_dyn_q": {"core": false, "short_desc": "INDI actuator dynamics parameter q. ", "type": "PARAM_FLOAT", "desc": ""}, "act_dyn_r": {"core": false, "short_desc": "INDI actuator dynamics parameter r. ", "type": "PARAM_FLOAT", "desc": ""}, "filt_cutoff": {"core": false, "short_desc": "INDI Filtering for the raw angular rates [Hz]. ", "type": "PARAM_FLOAT", "desc": ""}, "filt_cutoff_r": {"core": false, "short_desc": "INDI Filtering for the raw angular rates [Hz]. ", "type": "PARAM_FLOAT", "desc": ""}, "outerLoopActive": {"core": false, "short_desc": "Activate INDI for position control. ", "type": "PARAM_UINT8", "desc": ""}}}, "ctrlMel": {"desc": "Tunning variables for the full state Mellinger Controller ", "variables": {"kp_xy": {"core": true, "short_desc": "Position P-gain (horizontal xy plane) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "kd_xy": {"core": true, "short_desc": "Position D-gain (horizontal xy plane) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "ki_xy": {"core": true, "short_desc": "Position I-gain (horizontal xy plane) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "i_range_xy": {"core": false, "short_desc": "Attitude maximum accumulated error (roll and pitch) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "kp_z": {"core": true, "short_desc": "Position P-gain (vertical z plane) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "kd_z": {"core": true, "short_desc": "Position D-gain (vertical z plane) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "ki_z": {"core": true, "short_desc": "Position I-gain (vertical z plane) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "i_range_z": {"core": false, "short_desc": "Position maximum accumulated error (vertical z plane) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "mass": {"core": true, "short_desc": "total mass [kg] ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "massThrust": {"core": true, "short_desc": "Force to PWM stretch factor. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "kR_xy": {"core": true, "short_desc": "Attitude P-gain (roll and pitch) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "kR_z": {"core": true, "short_desc": "Attitude P-gain (yaw) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "kw_xy": {"core": true, "short_desc": "Attitude D-gain (roll and pitch) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "kw_z": {"core": true, "short_desc": "Attitude D-gain (yaw) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "ki_m_xy": {"core": true, "short_desc": "Attitude I-gain (roll and pitch) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "ki_m_z": {"core": true, "short_desc": "Attitude I-gain (yaw) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "kd_omega_rp": {"core": true, "short_desc": "Angular velocity D-Gain (roll and pitch) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "i_range_m_xy": {"core": false, "short_desc": "Attitude maximum accumulated error (roll and pitch) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "i_range_m_z": {"core": false, "short_desc": "Attitude maximum accumulated error (yaw) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}}}, "deck": {"desc": "The deck parameter group tells us which decks are connected. There is one parameter per official deck and the parameter is nonzero if the deck is connected. ", "variables": {"bcActiveMarker": {"core": true, "short_desc": "Nonzero if [Active Marker deck](https://www.bitcraze.io/products/active-marker-deck) is attached. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "bcAI": {"core": true, "short_desc": "Nonzero if [AI deck](https://store.bitcraze.io/collections/decks/products/ai-deck-1-1) is attached. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "bcBuzzer": {"core": true, "short_desc": "Nonzero if [Buzzer deck](https://store.bitcraze.io/collections/decks/products/buzzer-deck) is attached. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "bcCPPM": {"core": false, "short_desc": "", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "cpxOverUART2": {"core": true, "short_desc": "Nonzero if CRTP over UART has been forced. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "bcFlapperDeck": {"core": true, "short_desc": "", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "bcFlow": {"core": true, "short_desc": "Nonzero if Flow deck v1 is attached. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "bcFlow2": {"core": true, "short_desc": "Nonzero if [Flow deck v2](https://store.bitcraze.io/collections/decks/products/flow-deck-v2) is attached. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "bcGTGPS": {"core": false, "short_desc": "", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "bcLedRing": {"core": true, "short_desc": "Nonzero if [LED-ring deck](https://store.bitcraze.io/collections/decks/products/led-ring-deck) is attached. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "bcLhTester": {"core": false, "short_desc": "", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "bcLighthouse4": {"core": true, "short_desc": "Nonzero if [Lighthouse positioning deck](https://store.bitcraze.io/collections/decks/products/lighthouse-positioning-deck) is attached. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "bcDWM1000": {"core": true, "short_desc": "Deprecated, replaced with the \"deck.bcLoco\" parameter. Nonzero if [Loco positioning deck](https://store.bitcraze.io/products/loco-positioning-deck) is attached. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "bcLoco": {"core": true, "short_desc": "Nonzero if [Loco positioning deck](https://store.bitcraze.io/products/loco-positioning-deck) is attached. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "bcMultiranger": {"core": true, "short_desc": "Nonzero if [Multi-ranger deck](https://store.bitcraze.io/collections/decks/products/multi-ranger-deck) is attached. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "bcOA": {"core": false, "short_desc": "", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "bcUSD": {"core": true, "short_desc": "Nonzero if [SD-card deck](https://store.bitcraze.io/collections/decks/products/sd-card-deck) is attached. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "bcZRanger": {"core": true, "short_desc": "Nonzero if [Z-ranger deck](https://store.bitcraze.io/collections/decks/products/z-ranger-deck) is attached. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "bcZRanger2": {"core": true, "short_desc": "Nonzero if [Z-ranger deck v2](https://store.bitcraze.io/collections/decks/products/z-ranger-deck-v2) is attached. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}}}, "firmware": {"desc": "Read-only parameters that describe the current quad firmware. ", "variables": {"revision0": {"core": true, "short_desc": "Byte `0 - 7` of firmware revision. ", "type": "PARAM_UINT32, PARAM_RONLY", "desc": ""}, "revision1": {"core": true, "short_desc": "Byte `8 - 11` of firmware revision. ", "type": "PARAM_UINT16, PARAM_RONLY", "desc": ""}, "modified": {"core": true, "short_desc": "Nonzero if firmware has local changes. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}}}, "flapper": {"desc": "Current sensor parameters\n\nFlapper Drone configration parameters ", "variables": {"ampsPerVolt": {"core": false, "short_desc": "Current sensor constant (A/V) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "filtAlpha": {"core": false, "short_desc": "Current filter parameter <0; 1), set 0 to disable, 0.9999 for max effect. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "motBiasRoll": {"core": false, "short_desc": "Roll bias <-25%; 25%> (default 0%) ", "type": "PARAM_INT8, PARAM_PERSISTENT", "desc": "This parameter can be used if uneven performance of the left and right flapping mechanaisms and/or wings is observed, which in flight results in a drift in roll/sideways flight. Positive values make the drone roll more to the right, negative values to the left. "}, "servPitchNeutr": {"core": false, "short_desc": "Pitch servo neutral <25%; 75%> (default 50%) ", "type": "PARAM_UINT8, PARAM_PERSISTENT", "desc": "The parameter sets the neutral position of the pitch servo, such that the left and right wing-pairs are aligned when observed from the side. If in flight you observe too much drift forward (nose down) increase the value and vice versa if the drift is backward (nose up). "}, "servYawNeutr": {"core": false, "short_desc": "Yaw servo neutral <25%; 75%> (default 50%) ", "type": "PARAM_UINT8, PARAM_PERSISTENT", "desc": "The parameter sets the neutral position of the yaw servo, such that the yaw control arm is pointed spanwise. If in flight you observe drift in the clock-wise direction, increase this parameter and vice-versa if the drift is counter-clock-wise. "}, "flapperMaxThrust": {"core": false, "short_desc": "Yaw servo neutral <25%; 75%> (default 50%) ", "type": "PARAM_UINT16, PARAM_PERSISTENT", "desc": "The parameter sets the neutral position of the yaw servo, such that the yaw control arm is pointed spanwise. If in flight you observe drift in the clock-wise direction, increase this parameter and vice-versa if the drift is counter-clock-wise. "}}}, "flightmode": {"desc": "There are 2 levels to control: Position (X, Y, Z) and Attitude (pitch, roll, yaw or in quaternions)\n\nThese can be controlled in different modes: Absolute mode, Velocity mode or Disabled\n\nThese parameters have impact on which level and mode to use. ", "variables": {"althold": {"core": true, "short_desc": "Keeps the quad at its current altitude automatically. ", "type": "PARAM_UINT8", "desc": "Thrust control becomes height velocity control. "}, "poshold": {"core": true, "short_desc": "Keeps the quad at its current 3D position. ", "type": "PARAM_UINT8", "desc": "Pitch/Roll/Thrust control becomes X/Y/Z velocity control. X and U "}, "posSet": {"core": true, "short_desc": "Set to nonzero to select absolute mode for positioning. ", "type": "PARAM_UINT8", "desc": ""}, "yawMode": {"core": false, "short_desc": "Carefree(0), plusmode(1), xmode(2) ", "type": "PARAM_UINT8", "desc": ""}, "stabModeRoll": {"core": true, "short_desc": "Stabilization type for roll: rate(0) or angle(1) ", "type": "PARAM_UINT8", "desc": ""}, "stabModePitch": {"core": true, "short_desc": "Stabilization type for pitch: rate(0) or angle(1) ", "type": "PARAM_UINT8", "desc": ""}, "stabModeYaw": {"core": true, "short_desc": "Stabilization type for yaw: rate(0) or angle(1) ", "type": "PARAM_UINT8", "desc": ""}}}, "health": {"desc": "Health modules that is trying to find problems such as unbalanced propellers or a bad power path/battery. ", "variables": {"startPropTest": {"core": true, "short_desc": "Set nonzero to initiate test of propellers. ", "type": "PARAM_UINT8", "desc": ""}, "startBatTest": {"core": true, "short_desc": "Set nonzero to initiate test of battery. ", "type": "PARAM_UINT8", "desc": ""}, "propTestPWMRatio": {"core": true, "short_desc": "PWM ratio to use when testing propellers. Required for brushless motors. [0 - UINT16_MAX]. ", "type": "PARAM_UINT16, PARAM_PERSISTENT", "desc": ""}, "batTestPWMRatio": {"core": true, "short_desc": "PWM ratio to use when testing the battery. [0 - UINT16_MAX]. ", "type": "PARAM_UINT16, PARAM_PERSISTENT", "desc": ""}}}, "hlCommander": {"desc": "computes smooth setpoints based on high-level inputs such as: take-off, landing, polynomial trajectories. ", "variables": {"vtoff": {"core": true, "short_desc": "Default take off velocity (m/s) ", "type": "PARAM_FLOAT", "desc": ""}, "vland": {"core": true, "short_desc": "Default landing velocity (m/s) ", "type": "PARAM_FLOAT", "desc": ""}}}, "imu_sensors": {"desc": "An inertial measurement unit (IMU) is an electronic device that measures and reports a body's specific force, angular rate, and sometimes the orientation of the body, using a combination of accelerometers, gyroscopes, and sometimes magnetometers. ", "variables": {"BMP388": {"core": false, "short_desc": "Nonzero if BMP388 barometer is present. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "imuPhi": {"core": false, "short_desc": "Euler angle Phi defining IMU orientation on the airframe (in degrees) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "imuTheta": {"core": false, "short_desc": "Euler angle Theta defining IMU orientation on the airframe (in degrees) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "imuPsi": {"core": false, "short_desc": "Euler angle Psi defining IMU orientation on the airframe (in degrees) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "BoschGyrSel": {"core": false, "short_desc": "", "type": "PARAM_UINT8", "desc": ""}, "BoschAccSel": {"core": false, "short_desc": "", "type": "PARAM_UINT8", "desc": ""}, "BMM150": {"core": false, "short_desc": "", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "BMP285": {"core": false, "short_desc": "", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "AK8963": {"core": false, "short_desc": "Nonzero if AK8963 magnetometer is present. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "LPS25H": {"core": false, "short_desc": "Nonzero if LPS25H barometer is present. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}}}, "imu_tests": {"desc": "", "variables": {"MPU6500": {"core": false, "short_desc": "Nonzero if the MPU6500 self-test passes. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "AK8963": {"core": false, "short_desc": "Nonzero if the AK8963 self-test passes. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "LPS25H": {"core": false, "short_desc": "Nonzero if the LPS25H self-test passes. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "imuPhi": {"core": false, "short_desc": "Euler angle Phi defining IMU orientation on the airframe (in degrees) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "imuTheta": {"core": false, "short_desc": "Euler angle Theta defining IMU orientation on the airframe (in degrees) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "imuPsi": {"core": false, "short_desc": "Euler angle Psi defining IMU orientation on the airframe (in degrees) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}}}, "kalman": {"desc": "Tuning parameters for the Extended Kalman Filter (EKF) estimator ", "variables": {"resetEstimation": {"core": true, "short_desc": "Reset the kalman estimator. ", "type": "PARAM_UINT8", "desc": ""}, "robustTdoa": {"core": true, "short_desc": "Nonzero to use robust TDOA method (default: 0) ", "type": "PARAM_UINT8", "desc": ""}, "robustTwr": {"core": true, "short_desc": "Nonzero to use robust TWR method (default: 0) ", "type": "PARAM_UINT8", "desc": ""}, "pNAcc_xy": {"core": true, "short_desc": "Process noise for x and y acceleration. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "pNAcc_z": {"core": true, "short_desc": "Process noise for z acceleration. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "pNVel": {"core": true, "short_desc": "Process noise for velocity. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "pNPos": {"core": true, "short_desc": "Process noise for position. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "pNAtt": {"core": true, "short_desc": "Process noise for attitude. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "mNBaro": {"core": true, "short_desc": "Measurement noise for barometer. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "mNGyro_rollpitch": {"core": true, "short_desc": "Measurement noise for roll/pitch gyros. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "mNGyro_yaw": {"core": true, "short_desc": "Measurement noise for yaw gyro. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "initialX": {"core": true, "short_desc": "Initial X after reset [m]. ", "type": "PARAM_FLOAT", "desc": ""}, "initialY": {"core": true, "short_desc": "Initial Y after reset [m]. ", "type": "PARAM_FLOAT", "desc": ""}, "initialZ": {"core": true, "short_desc": "Initial Z after reset [m]. ", "type": "PARAM_FLOAT", "desc": ""}, "initialYaw": {"core": true, "short_desc": "Initial yaw after reset [rad]. ", "type": "PARAM_FLOAT", "desc": ""}, "maxPos": {"core": true, "short_desc": "Maximum accepted coordinate before kalman supervisor resets estimator. ", "type": "PARAM_FLOAT", "desc": ""}, "maxVel": {"core": true, "short_desc": "Maximum accepted velocity before kalman supervisor resets estimator. ", "type": "PARAM_FLOAT", "desc": ""}}}, "led": {"desc": "Parameters governing the onboard LEDs ", "variables": {"bitmask": {"core": false, "short_desc": "Control onboard LEDs using a bitmask. Enabling it will override the led sequencer. ", "type": "PARAM_UINT8", "desc": "``` | 7:ENABLE | 6:N/A | 5:BLUE_R | 4:RED_R | 3:GREEN_R | 2:RED_L | 1:GREEN_L | 0:BLUE_L | ``` "}}}, "lighthouse": {"desc": "Parameters and settings for the Lighthouse positioning system ", "variables": {"method": {"core": true, "short_desc": "Estimation Method: 0:CrossingBeam, 1:Sweep in EKF (default: 1) ", "type": "PARAM_UINT8", "desc": ""}, "bsCalibReset": {"core": true, "short_desc": "Reset calibration data status. ", "type": "PARAM_UINT8", "desc": ""}, "systemType": {"core": true, "short_desc": "Lighthouse baseStation version: 1: LighthouseV1, 2:LighthouseV2 (default: 2) ", "type": "PARAM_UINT8", "desc": ""}, "bsAvailable": {"core": true, "short_desc": "Bit field that indicates which base stations that are supported by the system. ", "type": "PARAM_UINT16, PARAM_RONLY", "desc": "The lowest bit maps to base station channel 1 and the highest to channel 16.\n\nDeprecated since 2022-08-15 "}, "sweepStd": {"core": true, "short_desc": "Standard deviation Sweep angles Lighthouse V1. ", "type": "PARAM_FLOAT", "desc": ""}, "sweepStd2": {"core": true, "short_desc": "Standard deviation Sweep angles Lighthouse V2. ", "type": "PARAM_FLOAT", "desc": ""}, "lh2maxRate": {"core": false, "short_desc": "Maximum rate of samples sent to the estimator. ", "type": "PARAM_UINT16", "desc": "When many LH V2 base stations are available in a system, the over all rate of samples sent to the estimator might be too high to handle. This parameter sets the (approximate) maximum rate (samples/s). 50 By default. "}, "enLhRawStream": {"core": false, "short_desc": "", "type": "PARAM_UINT8", "desc": ""}}}, "loco": {"desc": "The Loco Positioning System implements three different positioning modes: Two Way Ranging (TWR), Time Difference of Arrival 2 (TDoA 2) and Time Difference of Arrival 3 (TDoA 3)\n\n### TWR mode\n\nIn this mode, the tag pings the anchors in sequence, this allows it to measure the distance between the tag and the anchors. Using this information a theoretical minimum of 4 Anchors is required to calculate the 3D position of a Tag, but a more realistic number is 6 to add redundancy and accuracy. This mode is the most accurate mode and also works when the tag or quad leaves the space delimited by the anchors. The tag is actively communicating with the anchors in a time slotted fashion and in this mode only one tag or quad can be positioned with a maximum of 8 anchors.\n\n### TDoA 2 mode\n\nIn TDoA 2 mode, the anchor system is continuously sending synchronization packets. A tag listening to these packets can calculate the relative distance to two anchors by measuring the time difference of arrival of the packets. From the TDoA information it is possible to calculate the 3D position in space. In this mode the tag is only passively listening, so new tags do not add any load to the system which makes it possible to position any number of tags or quads simultaneously. This makes it a perfect mode for swarming.\n\nCompared to TWR, TDoA 2 is more restrictive when it comes to the space where positioning works, ideally the tag should be within, or very close to, the space delimited by the anchor system. This means that TDoA 2 works best with 8 anchors placed in the corners of the flying space. In this space the accuracy and precision is comparable to TWR.\n\nIn this mode the anchor system is time slotted and synchronized and the number of anchors is limited to 8.\n\n### TDoA 3 mode\n\nThe TDoA 3 mode has many similarities with TDoA 2 and supports any number of tags or quads. The main difference is that the time slotted scheme of TDoA 2 has been replaced by a randomized transmission schedule which makes it possible to add more anchors. By adding more anchors the system can be scaled to larger spaces or span multiple rooms without line of sight between all anchors. It also makes it more robust and can handle loss or addition of anchors dynamically. The estimated position in this mode might be slightly more noisy compared to TDoA 2. ", "variables": {"mode": {"core": true, "short_desc": "The Loco positioning mode to use (default: 0) ", "type": "PARAM_UINT8", "desc": "| Value | Mode |\n| - | - |\n| 0 | Auto |\n| 1 | TWR |\n| 2 | TDoA 2 |\n| 3 | TDoA 3 |\n "}}}, "locSrv": {"desc": "Service parameters for (external) positioning data stream through ctrp ", "variables": {"enRangeStreamFP32": {"core": true, "short_desc": "Enable CRTP stream of Loco node distance. ", "type": "PARAM_UINT8", "desc": ""}, "enLhAngleStream": {"core": true, "short_desc": "Enable CRTP stream of Lighthouse sweep angles. ", "type": "PARAM_UINT8", "desc": ""}, "extPosStdDev": {"core": true, "short_desc": "Standard deviation of external position. ", "type": "PARAM_FLOAT", "desc": ""}, "extQuatStdDev": {"core": true, "short_desc": "Standard deviation of the quarternion data to kalman filter. ", "type": "PARAM_FLOAT", "desc": ""}}}, "memTst": {"desc": "", "variables": {"resetW": {"core": false, "short_desc": "", "type": "PARAM_UINT8", "desc": ""}}}, "motion": {"desc": "Settings and parameters for handling of the flowdecks measurements ", "variables": {"disable": {"core": false, "short_desc": "Nonzero to not push the flow measurement in the EKF (default: 0) ", "type": "PARAM_UINT8", "desc": ""}, "adaptive": {"core": false, "short_desc": "Nonzero to turn on adaptive standard deviation estimation (default: 0) ", "type": "PARAM_UINT8", "desc": ""}, "flowStdFixed": {"core": true, "short_desc": "Set standard deviation flow measurement (default: 2.0f) ", "type": "PARAM_FLOAT", "desc": ""}}}, "motorPowerSet": {"desc": "Override power distribution to motors. ", "variables": {"enable": {"core": true, "short_desc": "Nonzero to override controller with set values. ", "type": "PARAM_UINT8", "desc": ""}, "m1": {"core": true, "short_desc": "motor power for m1: `0 - UINT16_MAX` ", "type": "PARAM_UINT16", "desc": ""}, "m2": {"core": true, "short_desc": "motor power for m2: `0 - UINT16_MAX` ", "type": "PARAM_UINT16", "desc": ""}, "m3": {"core": true, "short_desc": "motor power for m3: `0 - UINT16_MAX` ", "type": "PARAM_UINT16", "desc": ""}, "m4": {"core": true, "short_desc": "motor power for m4: `0 - UINT16_MAX` ", "type": "PARAM_UINT16", "desc": ""}}}, "multiranger": {"desc": "", "variables": {"filterMask": {"core": false, "short_desc": "Filter mask determining which range measurements is to be let through based on the range status of the VL53L1 chip. ", "type": "PARAM_UINT16", "desc": ""}}}, "pid_attitude": {"desc": "Tuning settings for the gains of the PID controller for the attitude of the Crazyflie which consists of the Yaw Pitch and Roll ", "variables": {"roll_kp": {"core": false, "short_desc": "Proportional gain for the PID roll controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "roll_ki": {"core": false, "short_desc": "Integral gain for the PID roll controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "roll_kd": {"core": false, "short_desc": "Derivative gain for the PID roll controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "roll_kff": {"core": false, "short_desc": "Feedforward gain for the PID roll controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "pitch_kp": {"core": false, "short_desc": "Proportional gain for the PID pitch controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "pitch_ki": {"core": false, "short_desc": "Integral gain for the PID pitch controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "pitch_kd": {"core": false, "short_desc": "Derivative gain for the PID pitch controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "pitch_kff": {"core": false, "short_desc": "Feedforward gain for the PID pitch controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "yaw_kp": {"core": false, "short_desc": "Proportional gain for the PID yaw controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "yaw_ki": {"core": false, "short_desc": "Integral gain for the PID yaw controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "yaw_kd": {"core": false, "short_desc": "Derivative gain for the PID yaw controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "yaw_kff": {"core": false, "short_desc": "Feedforward gain for the PID yaw controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "yawMaxDelta": {"core": false, "short_desc": "If nonzero, yaw setpoint can only be set within +/- yawMaxDelta from the current yaw. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "attFiltEn": {"core": false, "short_desc": "Low pass filter enable. ", "type": "PARAM_INT8, PARAM_PERSISTENT", "desc": ""}, "attFiltCut": {"core": false, "short_desc": "Low pass filter cut-off frequency (Hz) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}}}, "pid_rate": {"desc": "Tuning settings for the gains of the PID controller for the rate angles of the Crazyflie, which consists of the yaw, pitch and roll rates ", "variables": {"roll_kp": {"core": false, "short_desc": "Proportional gain for the PID roll rate controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "roll_ki": {"core": false, "short_desc": "Integral gain for the PID roll rate controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "roll_kd": {"core": false, "short_desc": "Derivative gain for the PID roll rate controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "roll_kff": {"core": false, "short_desc": "Feedforward gain for the PID roll rate controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "pitch_kp": {"core": false, "short_desc": "Proportional gain for the PID pitch rate controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "pitch_ki": {"core": false, "short_desc": "Integral gain for the PID pitch rate controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "pitch_kd": {"core": false, "short_desc": "Derivative gain for the PID pitch rate controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "pitch_kff": {"core": false, "short_desc": "Feedforward gain for the PID pitch rate controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "yaw_kp": {"core": false, "short_desc": "Proportional gain for the PID yaw rate controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "yaw_ki": {"core": false, "short_desc": "Integral gain for the PID yaw rate controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "yaw_kd": {"core": false, "short_desc": "Derivative gain for the PID yaw rate controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "yaw_kff": {"core": false, "short_desc": "Feedforward gain for the PID yaw rate controller. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "rateFiltEn": {"core": false, "short_desc": "Low pass filter enable. ", "type": "PARAM_INT8, PARAM_PERSISTENT", "desc": ""}, "omxFiltCut": {"core": false, "short_desc": "Low pass filter cut-off frequency, roll axis (Hz) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "omyFiltCut": {"core": false, "short_desc": "Low pass filter cut-off frequency, pitch axis (Hz) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "omzFiltCut": {"core": false, "short_desc": "Low pass filter cut-off frequency, yaw axis (Hz) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}}}, "pm": {"desc": "Power management parameters. ", "variables": {"lowVoltage": {"core": true, "short_desc": "At what voltage power management will indicate low battery. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "criticalLowVoltage": {"core": true, "short_desc": "At what voltage power management will indicate critical low battery. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}}}, "posCtlPid": {"desc": "Tuning settings for the gains of the PID controller for the position of the Crazyflie \u00a8 in the body-yaw-aligned X & Y and global Z directions. ", "variables": {"xKp": {"core": false, "short_desc": "Proportional gain for the position PID in the body-yaw-aligned X direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "xKi": {"core": false, "short_desc": "Proportional gain for the position PID in the body-yaw-aligned X direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "xKd": {"core": false, "short_desc": "Derivative gain for the position PID in the body-yaw-aligned X direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "xKff": {"core": false, "short_desc": "Feedforward gain for the position PID in the body-yaw-aligned X direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "yKp": {"core": false, "short_desc": "Proportional gain for the position PID in the body-yaw-aligned Y direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "yKi": {"core": false, "short_desc": "Integral gain for the position PID in the body-yaw-aligned Y direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "yKd": {"core": false, "short_desc": "Derivative gain for the position PID in the body-yaw-aligned Y direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "yKff": {"core": false, "short_desc": "Feedforward gain for the position PID in the body-yaw-aligned Y direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "zKp": {"core": false, "short_desc": "Proportional gain for the position PID in the global Z direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "zKi": {"core": false, "short_desc": "Integral gain for the position PID in the global Z direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "zKd": {"core": false, "short_desc": "Derivative gain for the position PID in the global Z direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "zKff": {"core": false, "short_desc": "Feedforward gain for the position PID in the body-yaw-aligned Z direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "thrustBase": {"core": false, "short_desc": "Approx. thrust needed for hover. ", "type": "PARAM_UINT16, PARAM_PERSISTENT", "desc": ""}, "thrustMin": {"core": false, "short_desc": "Min. thrust value to output. ", "type": "PARAM_UINT16, PARAM_PERSISTENT", "desc": ""}, "rLimit": {"core": false, "short_desc": "Roll absolute limit. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "pLimit": {"core": false, "short_desc": "Pitch absolute limit. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "xVelMax": {"core": false, "short_desc": "Maximum body-yaw-aligned X velocity. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "yVelMax": {"core": false, "short_desc": "Maximum body-yaw-aligned Y velocity. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "zVelMax": {"core": false, "short_desc": "Maximum Z Velocity. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}}}, "posCtrlIndi": {"desc": "Tuning settings for the gains of the INDI controller for the position and velocity of the Crazyflie in the X, Y and Z direction in the global coordinate system. ", "variables": {"K_xi_x": {"core": false, "short_desc": "INDI position controller X proportional gain. ", "type": "PARAM_FLOAT", "desc": ""}, "K_xi_y": {"core": false, "short_desc": "INDI position controller Y proportional gain. ", "type": "PARAM_FLOAT", "desc": ""}, "K_xi_z": {"core": false, "short_desc": "INDI position controller Z proportional gain. ", "type": "PARAM_FLOAT", "desc": ""}, "K_dxi_x": {"core": false, "short_desc": "INDI velocity controller X proportional gain. ", "type": "PARAM_FLOAT", "desc": ""}, "K_dxi_y": {"core": false, "short_desc": "INDI velocity controller Y proportional gain. ", "type": "PARAM_FLOAT", "desc": ""}, "K_dxi_z": {"core": false, "short_desc": "INDI velocity controller Z proportional gain. ", "type": "PARAM_FLOAT", "desc": ""}, "pq_clamping": {"core": false, "short_desc": "INDI Clamping value for the INDI roll and pitch command to inner loop [degrees]. ", "type": "PARAM_FLOAT", "desc": ""}}}, "posEstAlt": {"desc": "Tuning setttings for the altitude estimator/filtering ", "variables": {"estAlphaAsl": {"core": true, "short_desc": "parameter alpha IIR Filter above sea level/true altitude (baro) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "estAlphaZr": {"core": true, "short_desc": "parameter alpha IIR Filter Height (zranger) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "velFactor": {"core": false, "short_desc": "Multiplying factor for adding velocity. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "velZAlpha": {"core": false, "short_desc": "Blendning factor to avoid accumulate error. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "vAccDeadband": {"core": true, "short_desc": "Vertical acceleration deadband. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}}}, "powerDist": {"desc": "Power distribution parameters ", "variables": {"idleThrust": {"core": true, "short_desc": "Motor thrust to set at idle (default: 0) ", "type": "PARAM_UINT32, PARAM_PERSISTENT", "desc": "This is often needed for brushless motors as it takes time to start up the motor. Then a common value is between 3000 - 6000. "}}}, "quadSysId": {"desc": "System identification parameters for quad rotor ", "variables": {"thrustToTorque": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "pwmToThrustA": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "pwmToThrustB": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "armLength": {"core": false, "short_desc": "Length of arms (m) ", "type": "PARAM_FLOAT", "desc": "The distance from the center to a motor "}}}, "ring": {"desc": "The LED ring expansion deck contains two powerful front-facing white LEDs and 12 bottom-facing RGB individually addressable LEDs (it uses the same LEDs as used in the NeoPixel products by Adafruit).\n\nThe deck is designed to be installed as the last deck on the bottom of the quad. It does not have pass-through holes for the expansion port connector. ", "variables": {"effect": {"core": true, "short_desc": "Id of effect to use (default: 6) ", "type": "PARAM_UINT8, PARAM_PERSISTENT", "desc": "| Id | Effect | \n| - | - | \n| 0 | Off | \n| 1 | White spinner | \n| 2 | Color spinner | \n| 3 | Tilt | \n| 4 | Brightness | \n| 5 | Color spinner 2 | \n| 6 | Double spinner | \n| 7 | Solid color effect | \n| 8 | Factory test | \n| 9 | Battery status | \n| 10 | Boat lights | \n| 11 | Alert | \n| 12 | Gravity | \n| 13 | Virtual Memory | \n| 14 | Fade color | \n| 15 | Communication Signal Strength | \n| 16 | Status Localization Service | \n| 17 | LED timing from memory | \n| 18 | Lighthouse Positioning | \n "}, "neffect": {"core": true, "short_desc": "Number of effects available. ", "type": "PARAM_UINT32, PARAM_RONLY", "desc": ""}, "solidRed": {"core": true, "short_desc": "Intensity of Red for Solid color effect (default: 20) ", "type": "PARAM_UINT8", "desc": ""}, "solidGreen": {"core": true, "short_desc": "Intensity of Green for solid color effect (default: 20) ", "type": "PARAM_UINT8", "desc": ""}, "solidBlue": {"core": true, "short_desc": "Intensity of Blue for solid color effect (default: 20) ", "type": "PARAM_UINT8", "desc": ""}, "headlightEnable": {"core": true, "short_desc": "Nonzero to Enable headlights (default: 0) ", "type": "PARAM_UINT8", "desc": ""}, "emptyCharge": {"core": true, "short_desc": "At what volt the Battery effect indicates empty. ", "type": "PARAM_FLOAT", "desc": ""}, "fullCharge": {"core": true, "short_desc": "At what volt the battery effect indicates full. ", "type": "PARAM_FLOAT", "desc": ""}, "fadeColor": {"core": true, "short_desc": "Color to fade to for Fade color effect. ", "type": "PARAM_UINT32", "desc": "Encoded as:\n\nbit 32 0 00000000 RRRRRRRR GGGGGGGG BBBBBBBB "}, "fadeTime": {"core": true, "short_desc": "The time for face effect to complete. ", "type": "PARAM_FLOAT", "desc": ""}}}, "sensfusion6": {"desc": "Sensor fusion is the process of combining sensory data or data derived from disparate sources such that the resulting information has less uncertainty than would be possible when these sources were used individually.\n\nThe sensfusion6 module uses an 3 axis accelerometer and a 3 axis gyro to get accurate attitude measurements. ", "variables": {"kp": {"core": true, "short_desc": "Integral gain (default: 0.002) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "ki": {"core": true, "short_desc": "Propotional gain (default: 0.8) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "baseZacc": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}}}, "sound": {"desc": "The buzzer deck contains a low profile piezo buzzer. ", "variables": {"effect": {"core": true, "short_desc": "Id of effect to use (default: 0) ", "type": "PARAM_UINT8, PARAM_PERSISTENT", "desc": "| Id | Effect | \n| - | - | \n| 0 | Off | \n| 1 | Factory test | \n| 2 | USB connected | \n| 3 | USB disconnected | \n| 4 | Charging done | \n| 5 | Low battery | \n| 6 | Startup | \n| 7 | Calibrated | \n| 8 | Range slow | \n| 9 | Range fast | \n| 10 | Star Wars Imperial March | \n| 11 | Bypass | \n| 12 | Siren | \n| 13 | Tilt quad to play sound | \n "}, "neffect": {"core": true, "short_desc": "Number of effects available. ", "type": "PARAM_UINT32, PARAM_RONLY", "desc": ""}, "freq": {"core": true, "short_desc": "Frequency to use for Bypass effect. ", "type": "PARAM_UINT16", "desc": ""}}}, "stabilizer": {"desc": "Parameters to set the estimator and controller type for the stabilizer module, or to do an emergency stop ", "variables": {"estimator": {"core": true, "short_desc": "Estimator type Auto select(0), complementary(1), extended kalman(2), **unscented kalman(3) (Default: 0) ", "type": "PARAM_UINT8", "desc": "** Experimental, needs to be enabled in kbuild "}, "controller": {"core": true, "short_desc": "Controller type Auto select(0), PID(1), Mellinger(2), INDI(3), Brescianini(4) (Default: 0) ", "type": "PARAM_UINT8", "desc": ""}, "stop": {"core": true, "short_desc": "If set to nonzero will turn off power. ", "type": "PARAM_UINT8", "desc": ""}}}, "syslink": {"desc": "", "variables": {"probe": {"core": false, "short_desc": "Trigger syslink debug probe in the NRF by setting to 1. ", "type": "PARAM_UINT8", "desc": ""}}}, "system": {"desc": "", "variables": {"highlight": {"core": true, "short_desc": "Highlight quad. ", "type": "PARAM_UINT8", "desc": "Uses functionality available, such as LEDs to highlight a quad, useful for swarms. "}, "storageStats": {"core": false, "short_desc": "Set to nonzero to dump CPU and stack usage to console. ", "type": "PARAM_UINT8", "desc": ""}, "storageReformat": {"core": false, "short_desc": "Set to nonzero to re-format the storage. Warning: all data will be lost! ", "type": "PARAM_UINT8", "desc": ""}, "taskDump": {"core": true, "short_desc": "Set to nonzero to dump CPU and stack usage to console. ", "type": "PARAM_UINT8", "desc": ""}, "selftestPassed": {"core": true, "short_desc": "All tests passed when booting. ", "type": "PARAM_INT8, PARAM_RONLY", "desc": ""}, "forceArm": {"core": false, "short_desc": "Set to nonzero to force system to be armed. ", "type": "PARAM_INT8, PARAM_PERSISTENT", "desc": ""}, "assertInfo": {"core": false, "short_desc": "Set to nonzero to trigger dump of assert information to the log. ", "type": "PARAM_UINT8", "desc": ""}}}, "tdoa2": {"desc": "", "variables": {"stddev": {"core": false, "short_desc": "The measurement noise to use when sending TDoA measurements to the estimator. ", "type": "PARAM_FLOAT", "desc": ""}}}, "tdoa3": {"desc": "", "variables": {"stddev": {"core": false, "short_desc": "The measurement noise to use when sending TDoA measurements to the estimator. ", "type": "PARAM_FLOAT", "desc": ""}}}, "tdoaEngine": {"desc": "The TDoA engine processes TDoA data from the Loco Positioning System. ", "variables": {"logId": {"core": true, "short_desc": "Id of anchor used for logging, primary anchor. ", "type": "PARAM_UINT8", "desc": ""}, "logOthrId": {"core": true, "short_desc": "Id of anchor used for logging, secondary anchor. ", "type": "PARAM_UINT8", "desc": ""}, "matchAlgo": {"core": false, "short_desc": "", "type": "PARAM_UINT8", "desc": ""}}}, "ukf": {"desc": "Parameter values used for tuning the Unscented Kalman Filter (experimental) ", "variables": {"resetEstimation": {"core": false, "short_desc": "", "type": "PARAM_UINT8", "desc": ""}, "useNavFilter": {"core": false, "short_desc": "", "type": "PARAM_UINT8", "desc": ""}, "sigmaInitPos_xy": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "sigmaInitPos_z": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "sigmaInitVel": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "sigmaInitAtt": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "procNoiseA_h": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "procNoiseA_z": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "procNoiseVel_h": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "procNoiseVel_z": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "procNoiseRate_h": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "procNoiseRate_z": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "baroNoise": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "qualityGateTof": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "qualityGateFlow": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "qualityGateTdoa": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "qualityGateBaro": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "qualityGateSweep": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}, "ukfw0": {"core": false, "short_desc": "", "type": "PARAM_FLOAT", "desc": ""}}}, "usd": {"desc": "The micro SD card deck is used for on-board logging of data to a micro SD card. ", "variables": {"canLog": {"core": true, "short_desc": "Non zero if logging is possible, 0 indicates there might be a problem with the logging configuration. ", "type": "PARAM_UINT8, PARAM_RONLY", "desc": ""}, "logging": {"core": true, "short_desc": "Controls if logging to the SD-card is active. Set to 1 to start logging, set to 0 to stop logging (default). ", "type": "PARAM_UINT8", "desc": ""}}}, "velCtlPid": {"desc": "Tuning settings for the gains of the PID controller for the velocity of the Crazyflie \u00a8 in the body-yaw-aligned X & Y and global Z directions. ", "variables": {"vxKp": {"core": false, "short_desc": "Proportional gain for the velocity PID in the body-yaw-aligned X direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "vxKi": {"core": false, "short_desc": "Integral gain for the velocity PID in the body-yaw-aligned X direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "vxKd": {"core": false, "short_desc": "Derivative gain for the velocity PID in the body-yaw-aligned X direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "vxKFF": {"core": false, "short_desc": "Feedforward gain for the velocity PID in the body-yaw-aligned X direction (in degrees per m/s) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "vyKp": {"core": false, "short_desc": "Proportional gain for the velocity PID in the body-yaw-aligned Y direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "vyKi": {"core": false, "short_desc": "Integral gain for the velocity PID in the body-yaw-aligned Y direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "vyKd": {"core": false, "short_desc": "Derivative gain for the velocity PID in the body-yaw-aligned Y direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "vyKFF": {"core": false, "short_desc": "Feedforward gain for the velocity PID in the body-yaw-aligned Y direction (in degrees per m/s) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "vzKp": {"core": false, "short_desc": "Proportional gain for the velocity PID in the global Z direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "vzKi": {"core": false, "short_desc": "Integral gain for the velocity PID in the global Z direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "vzKd": {"core": false, "short_desc": "Derivative gain for the velocity PID in the global Z direction. ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}, "vzKFF": {"core": false, "short_desc": "Feedforward gain for the velocity PID in the global direction (in degrees per m/s) ", "type": "PARAM_FLOAT, PARAM_PERSISTENT", "desc": ""}}}}, "logs": {"acc": {"desc": "Log group for accelerometer sensor measurement, based on body frame. Compensated for a miss-alignment by gravity at startup.\n\nFor data on measurement noise please see information from the sensor manufacturer. To see what accelerometer sensor is in your Crazyflie or Bolt please check documentation on the Bitcraze webpage or check the parameter group `imu_sensors`. ", "variables": {"x": {"core": true, "short_desc": "Acceleration in X [Gs]. ", "type": "LOG_FLOAT", "desc": ""}, "y": {"core": true, "short_desc": "Acceleration in Y [Gs]. ", "type": "LOG_FLOAT", "desc": ""}, "z": {"core": true, "short_desc": "Acceleration in Z [Gs]. ", "type": "LOG_FLOAT", "desc": ""}}}, "activeMarker": {"desc": "", "variables": {"btSns": {"core": false, "short_desc": "", "type": "LOG_UINT8", "desc": ""}, "i2cOk": {"core": false, "short_desc": "", "type": "LOG_UINT8", "desc": ""}}}, "aidecktest": {"desc": "", "variables": {"testresult": {"core": false, "short_desc": "", "type": "LOG_UINT32", "desc": ""}, "done": {"core": false, "short_desc": "", "type": "LOG_UINT8", "desc": ""}}}, "amarkUartTest": {"desc": "", "variables": {"passed": {"core": false, "short_desc": "", "type": "LOG_UINT8", "desc": ""}}}, "baro": {"desc": "Log group for the barometer.\n\nFor data on measurement noise please see information from the sensor manufacturer. To see what barometer sensor is in your Crazyflie or Bolt please check documentation on the Bitcraze webpage or check the parameter group `imu_sensors`. ", "variables": {"asl": {"core": true, "short_desc": "Altitude above Sea Level [m]. ", "type": "LOG_FLOAT", "desc": ""}, "temp": {"core": false, "short_desc": "Temperature [degrees Celsius]. ", "type": "LOG_FLOAT", "desc": ""}, "pressure": {"core": true, "short_desc": "Air preassure [mbar]. ", "type": "LOG_FLOAT", "desc": ""}}}, "controller": {"desc": "Logging variables for the command and reference signals for the altitude PID controller ", "variables": {"cmd_thrust": {"core": false, "short_desc": "Thrust command. ", "type": "LOG_FLOAT", "desc": ""}, "cmd_roll": {"core": false, "short_desc": "Roll command. ", "type": "LOG_FLOAT", "desc": ""}, "cmd_pitch": {"core": false, "short_desc": "Pitch command. ", "type": "LOG_FLOAT", "desc": ""}, "cmd_yaw": {"core": false, "short_desc": "yaw command ", "type": "LOG_FLOAT", "desc": ""}, "r_roll": {"core": false, "short_desc": "Gyro roll measurement in radians. ", "type": "LOG_FLOAT", "desc": ""}, "r_pitch": {"core": false, "short_desc": "Gyro pitch measurement in radians. ", "type": "LOG_FLOAT", "desc": ""}, "r_yaw": {"core": false, "short_desc": "Yaw measurement in radians. ", "type": "LOG_FLOAT", "desc": ""}, "accelz": {"core": false, "short_desc": "Acceleration in the zaxis in G-force. ", "type": "LOG_FLOAT", "desc": ""}, "actuatorThrust": {"core": false, "short_desc": "Thrust command without (tilt)compensation. ", "type": "LOG_FLOAT", "desc": ""}, "roll": {"core": false, "short_desc": "Desired roll setpoint. ", "type": "LOG_FLOAT", "desc": ""}, "pitch": {"core": false, "short_desc": "Desired pitch setpoint. ", "type": "LOG_FLOAT", "desc": ""}, "yaw": {"core": false, "short_desc": "Desired yaw setpoint. ", "type": "LOG_FLOAT", "desc": ""}, "rollRate": {"core": false, "short_desc": "Desired roll rate setpoint. ", "type": "LOG_FLOAT", "desc": ""}, "pitchRate": {"core": false, "short_desc": "Desired pitch rate setpoint. ", "type": "LOG_FLOAT", "desc": ""}, "yawRate": {"core": false, "short_desc": "Desired yaw rate setpoint. ", "type": "LOG_FLOAT", "desc": ""}, "ctr_yaw": {"core": false, "short_desc": "", "type": "LOG_INT16", "desc": ""}}}, "crtp": {"desc": "", "variables": {"rxRate": {"core": false, "short_desc": "", "type": "LOG_UINT16", "desc": ""}, "txRate": {"core": false, "short_desc": "", "type": "LOG_UINT16", "desc": ""}}}, "ctrlINDI": {"desc": "", "variables": {"cmd_thrust": {"core": false, "short_desc": "INDI Thrust motor command [motor units]. ", "type": "LOG_FLOAT", "desc": ""}, "cmd_roll": {"core": false, "short_desc": "INDI Roll motor command [motor units]. ", "type": "LOG_FLOAT", "desc": ""}, "cmd_pitch": {"core": false, "short_desc": "INDI Pitch motor command [motor units]. ", "type": "LOG_FLOAT", "desc": ""}, "cmd_yaw": {"core": false, "short_desc": "INDI Yaw motor command [motor units]. ", "type": "LOG_FLOAT", "desc": ""}, "r_roll": {"core": false, "short_desc": "INDI unfiltered Gyroscope roll rate measurement (only factory filter and 2 pole low-pass filter) [rad/s]. ", "type": "LOG_FLOAT", "desc": ""}, "r_pitch": {"core": false, "short_desc": "INDI unfiltered Gyroscope pitch rate measurement (only factory filter and 2 pole low-pass filter) [rad/s]. ", "type": "LOG_FLOAT", "desc": ""}, "r_yaw": {"core": false, "short_desc": "INDI unfiltered Gyroscope yaw rate measurement (only factory filter and 2 pole low-pass filter) [rad/s]. ", "type": "LOG_FLOAT", "desc": ""}, "u_act_dyn_p": {"core": false, "short_desc": "INDI roll motor command propagated through motor dynamics [motor units]. ", "type": "LOG_FLOAT", "desc": ""}, "u_act_dyn_q": {"core": false, "short_desc": "INDI pitch motor command propagated through motor dynamics [motor units]. ", "type": "LOG_FLOAT", "desc": ""}, "u_act_dyn_r": {"core": false, "short_desc": "INDI yaw motor command propagated through motor dynamics [motor units]. ", "type": "LOG_FLOAT", "desc": ""}, "du_p": {"core": false, "short_desc": "INDI roll motor command increment [motor units]. ", "type": "LOG_FLOAT", "desc": ""}, "du_q": {"core": false, "short_desc": "INDI pitch motor command increment [motor units]. ", "type": "LOG_FLOAT", "desc": ""}, "du_r": {"core": false, "short_desc": "INDI yaw motor command increment [motor units]. ", "type": "LOG_FLOAT", "desc": ""}, "ang_accel_ref_p": {"core": false, "short_desc": "INDI reference angular acceleration roll (sometimes named virtual input in INDI papers) [rad/s^2]. ", "type": "LOG_FLOAT", "desc": ""}, "ang_accel_ref_q": {"core": false, "short_desc": "INDI reference angular acceleration pitch (sometimes named virtual input in INDI papers) [rad/s^2]. ", "type": "LOG_FLOAT", "desc": ""}, "ang_accel_ref_r": {"core": false, "short_desc": "INDI reference angular acceleration yaw (sometimes named virtual input in INDI papers) [rad/s^2]. ", "type": "LOG_FLOAT", "desc": ""}, "rate_d": {"core": false, "short_desc": "INDI derived angular acceleration from filtered gyroscope measurement, roll [rad/s^2]. ", "type": "LOG_FLOAT", "desc": "INDI derived angular acceleration from filtered gyroscope measurement, yaw [rad/s^2].\n\nINDI derived angular acceleration from filtered gyroscope measurement, pitch [rad/s^2]. "}, "uf_p": {"core": false, "short_desc": "INDI filtered (8Hz low-pass) roll motor input from previous time step [motor units]. ", "type": "LOG_FLOAT", "desc": ""}, "uf_q": {"core": false, "short_desc": "INDI filtered (8Hz low-pass) pitch motor input from previous time step [motor units]. ", "type": "LOG_FLOAT", "desc": ""}, "uf_r": {"core": false, "short_desc": "INDI filtered (8Hz low-pass) yaw motor input from previous time step [motor units]. ", "type": "LOG_FLOAT", "desc": ""}, "Omega_f_p": {"core": false, "short_desc": "INDI filtered gyroscope measurement (8Hz low-pass), roll [rad/s]. ", "type": "LOG_FLOAT", "desc": ""}, "Omega_f_q": {"core": false, "short_desc": "INDI filtered gyroscope measurement (8Hz low-pass), pitch [rad/s]. ", "type": "LOG_FLOAT", "desc": ""}, "Omega_f_r": {"core": false, "short_desc": "INDI filtered gyroscope measurement (8Hz low-pass), yaw [rad/s]. ", "type": "LOG_FLOAT", "desc": ""}, "n_p": {"core": false, "short_desc": "INDI desired attitude angle from outer loop, roll [rad]. ", "type": "LOG_FLOAT", "desc": ""}, "n_q": {"core": false, "short_desc": "INDI desired attitude angle from outer loop, pitch [rad]. ", "type": "LOG_FLOAT", "desc": ""}, "n_r": {"core": false, "short_desc": "INDI desired attitude angle from outer loop, yaw [rad]. ", "type": "LOG_FLOAT", "desc": ""}}}, "ctrlMel": {"desc": "Logging variables for the command and reference signals for the Mellinger controller ", "variables": {"cmd_thrust": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "cmd_roll": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "cmd_pitch": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "cmd_yaw": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "r_roll": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "r_pitch": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "r_yaw": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "accelz": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "zdx": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "zdy": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "zdz": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "i_err_x": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "i_err_y": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "i_err_z": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}}}, "ctrltarget": {"desc": "Log group for the current controller target\n\nNote: all members may not be updated depending on how the system is used ", "variables": {"x": {"core": true, "short_desc": "Desired position X [m]. ", "type": "LOG_FLOAT", "desc": ""}, "y": {"core": true, "short_desc": "Desired position Y [m]. ", "type": "LOG_FLOAT", "desc": ""}, "z": {"core": true, "short_desc": "Desired position X [m]. ", "type": "LOG_FLOAT", "desc": ""}, "vx": {"core": true, "short_desc": "Desired velocity X [m/s]. ", "type": "LOG_FLOAT", "desc": ""}, "vy": {"core": true, "short_desc": "Desired velocity Y [m/s]. ", "type": "LOG_FLOAT", "desc": ""}, "vz": {"core": true, "short_desc": "Desired velocity Z [m/s]. ", "type": "LOG_FLOAT", "desc": ""}, "ax": {"core": true, "short_desc": "Desired acceleration X [m/s^2]. ", "type": "LOG_FLOAT", "desc": ""}, "ay": {"core": true, "short_desc": "Desired acceleration Y [m/s^2]. ", "type": "LOG_FLOAT", "desc": ""}, "az": {"core": true, "short_desc": "Desired acceleration Z [m/s^2]. ", "type": "LOG_FLOAT", "desc": ""}, "roll": {"core": true, "short_desc": "Desired attitude, roll [deg]. ", "type": "LOG_FLOAT", "desc": ""}, "pitch": {"core": true, "short_desc": "Desired attitude, pitch [deg]. ", "type": "LOG_FLOAT", "desc": ""}, "yaw": {"core": true, "short_desc": "Desired attitude rate, yaw rate [deg/s]. ", "type": "LOG_FLOAT", "desc": ""}}}, "ctrltargetZ": {"desc": "Log group for the current controller target, compressed format. This flavour of the controller target logs are defined with types that use less space and makes it possible to add more logs to a log configuration.\n\nNote: all members may not be updated depending on how the system is used ", "variables": {"x": {"core": false, "short_desc": "Desired position X [mm]. ", "type": "LOG_INT16", "desc": ""}, "y": {"core": false, "short_desc": "Desired position Y [mm]. ", "type": "LOG_INT16", "desc": ""}, "z": {"core": false, "short_desc": "Desired position Z [mm]. ", "type": "LOG_INT16", "desc": ""}, "vx": {"core": false, "short_desc": "Desired velocity X [mm/s]. ", "type": "LOG_INT16", "desc": ""}, "vy": {"core": false, "short_desc": "Desired velocity Y [mm/s]. ", "type": "LOG_INT16", "desc": ""}, "vz": {"core": false, "short_desc": "Desired velocity Z [mm/s]. ", "type": "LOG_INT16", "desc": ""}, "ax": {"core": false, "short_desc": "Desired acceleration X [mm/s^2]. ", "type": "LOG_INT16", "desc": ""}, "ay": {"core": false, "short_desc": "Desired acceleration Y [mm/s^2]. ", "type": "LOG_INT16", "desc": ""}, "az": {"core": false, "short_desc": "Desired acceleration Z [mm/s^2]. ", "type": "LOG_INT16", "desc": ""}}}, "DTR_P2P": {"desc": "", "variables": {"rx_state": {"core": false, "short_desc": "", "type": "LOG_UINT8", "desc": ""}, "tx_state": {"core": false, "short_desc": "", "type": "LOG_UINT8", "desc": ""}}}, "estimator": {"desc": "", "variables": {"rtApnd": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "rtRej": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}}}, "ext_pos": {"desc": "", "variables": {"X": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "Y": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "Z": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}}}, "extrx": {"desc": "External receiver (RX) log group. This contains setpoints for thrust, roll, pitch, yaw rate, z velocity, and arming and altitude-hold signals ", "variables": {"thrust": {"core": false, "short_desc": "External RX thrust. ", "type": "LOG_FLOAT", "desc": ""}, "roll": {"core": false, "short_desc": "External RX roll setpoint. ", "type": "LOG_FLOAT", "desc": ""}, "pitch": {"core": false, "short_desc": "External RX pitch setpoint. ", "type": "LOG_FLOAT", "desc": ""}, "rollRate": {"core": false, "short_desc": "External RX roll rate setpoint. ", "type": "LOG_FLOAT", "desc": ""}, "pitchRate": {"core": false, "short_desc": "External RX pitch rate setpoint. ", "type": "LOG_FLOAT", "desc": ""}, "yawRate": {"core": false, "short_desc": "External RX yaw rate setpoint. ", "type": "LOG_FLOAT", "desc": ""}, "zVel": {"core": false, "short_desc": "External RX z-velocity setpoint. ", "type": "LOG_FLOAT", "desc": ""}, "AltHold": {"core": false, "short_desc": "External RX Altitude Hold signal. ", "type": "LOG_UINT8", "desc": ""}, "Arm": {"core": false, "short_desc": "External RX Arming signal. ", "type": "LOG_UINT8", "desc": ""}}}, "extrx_raw": {"desc": "External receiver (RX) log group. This contains received raw channel data ", "variables": {"ch0": {"core": false, "short_desc": "External RX received channel 0 value. ", "type": "LOG_UINT16", "desc": ""}, "ch1": {"core": false, "short_desc": "External RX received channel 1 value. ", "type": "LOG_UINT16", "desc": ""}, "ch2": {"core": false, "short_desc": "External RX received channel 2 value. ", "type": "LOG_UINT16", "desc": ""}, "ch3": {"core": false, "short_desc": "External RX received channel 3 value. ", "type": "LOG_UINT16", "desc": ""}, "ch4": {"core": false, "short_desc": "External RX received channel 4 value. ", "type": "LOG_UINT16", "desc": ""}, "ch5": {"core": false, "short_desc": "External RX received channel 5 value. ", "type": "LOG_UINT16", "desc": ""}, "ch6": {"core": false, "short_desc": "External RX received channel 6 value. ", "type": "LOG_UINT16", "desc": ""}, "ch7": {"core": false, "short_desc": "External RX received channel 7 value. ", "type": "LOG_UINT16", "desc": ""}}}, "flapper": {"desc": "", "variables": {"vbat": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "i_raw": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "current": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "power": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}}}, "gps": {"desc": "", "variables": {"lat": {"core": false, "short_desc": "", "type": "LOG_INT32", "desc": ""}, "lon": {"core": false, "short_desc": "", "type": "LOG_INT32", "desc": ""}, "hMSL": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "hAcc": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "nsat": {"core": false, "short_desc": "", "type": "LOG_INT32", "desc": ""}, "fix": {"core": false, "short_desc": "", "type": "LOG_INT32", "desc": ""}}}, "gyro": {"desc": "Log group for gyroscopes.\n\nFor data on measurement noise please see information from the sensor manufacturer. To see what gyroscope sensor is in your Crazyflie or Bolt please check documentation on the Bitcraze webpage or check the parameter group `imu_sensors`. ", "variables": {"xRaw": {"core": false, "short_desc": "", "type": "LOG_INT16", "desc": ""}, "yRaw": {"core": false, "short_desc": "", "type": "LOG_INT16", "desc": ""}, "zRaw": {"core": false, "short_desc": "", "type": "LOG_INT16", "desc": ""}, "xVariance": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "yVariance": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "zVariance": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "x": {"core": true, "short_desc": "Angular velocity (rotation) around the X-axis, after filtering [deg/s]. ", "type": "LOG_FLOAT", "desc": ""}, "y": {"core": true, "short_desc": "Angular velocity (rotation) around the Y-axis, after filtering [deg/s]. ", "type": "LOG_FLOAT", "desc": ""}, "z": {"core": true, "short_desc": "Angular velocity (rotation) around the Z-axis, after filtering [deg/s]. ", "type": "LOG_FLOAT", "desc": ""}}}, "health": {"desc": "Logging of the result from the health checks. ", "variables": {"motorVarXM1": {"core": false, "short_desc": "Variance test result of accel. axis X on motor 1. ", "type": "LOG_FLOAT", "desc": ""}, "motorVarYM1": {"core": false, "short_desc": "Variance test result of accel. axis Y on motor 1. ", "type": "LOG_FLOAT", "desc": ""}, "motorVarXM2": {"core": false, "short_desc": "Variance test result of accel. axis X on motor 2. ", "type": "LOG_FLOAT", "desc": ""}, "motorVarYM2": {"core": false, "short_desc": "Variance test result of accel. axis Y on motor 2. ", "type": "LOG_FLOAT", "desc": ""}, "motorVarXM3": {"core": false, "short_desc": "Variance test result of accel. axis X on motor 3. ", "type": "LOG_FLOAT", "desc": ""}, "motorVarYM3": {"core": false, "short_desc": "Variance test result of accel. axis Y on motor 3. ", "type": "LOG_FLOAT", "desc": ""}, "motorVarXM4": {"core": false, "short_desc": "Variance test result of accel. axis X on motor 4. ", "type": "LOG_FLOAT", "desc": ""}, "motorVarYM4": {"core": false, "short_desc": "Variance test result of accel. axis Y on motor 4. ", "type": "LOG_FLOAT", "desc": ""}, "motorPass": {"core": true, "short_desc": "Propeller test result, bit is one if OK. [Bit0=M1 Bit1=M2 ...]. ", "type": "LOG_UINT8", "desc": ""}, "batterySag": {"core": false, "short_desc": "Battery voltage sag test result. [V]. ", "type": "LOG_FLOAT", "desc": ""}, "batteryPass": {"core": true, "short_desc": "Battery test result. Nonzero if OK. ", "type": "LOG_UINT8", "desc": ""}, "motorTestCount": {"core": false, "short_desc": "", "type": "LOG_UINT16", "desc": ""}}}, "kalman": {"desc": "Variables and results from the Extended Kalman Filter ", "variables": {"stateX": {"core": false, "short_desc": "State position in the global frame x. ", "type": "LOG_FLOAT", "desc": "Note: This is similar to stateEstimate.x. "}, "stateY": {"core": false, "short_desc": "State position in the global frame y. ", "type": "LOG_FLOAT", "desc": "Note: This is similar to stateEstimate.y "}, "stateZ": {"core": false, "short_desc": "State position in the global frame z. ", "type": "LOG_FLOAT", "desc": "Note: This is similar to stateEstimate.z "}, "statePX": {"core": false, "short_desc": "State velocity in its body frame x. ", "type": "LOG_FLOAT", "desc": "Note: This should be part of stateEstimate "}, "statePY": {"core": false, "short_desc": "State velocity in its body frame y. ", "type": "LOG_FLOAT", "desc": "Note: This should be part of stateEstimate "}, "statePZ": {"core": false, "short_desc": "State velocity in its body frame z. ", "type": "LOG_FLOAT", "desc": "Note: This should be part of stateEstimate "}, "stateD0": {"core": false, "short_desc": "State attitude error roll. ", "type": "LOG_FLOAT", "desc": ""}, "stateD1": {"core": false, "short_desc": "State attitude error pitch. ", "type": "LOG_FLOAT", "desc": ""}, "stateD2": {"core": false, "short_desc": "State attitude error yaw. ", "type": "LOG_FLOAT", "desc": ""}, "varX": {"core": false, "short_desc": "Covariance matrix position x. ", "type": "LOG_FLOAT", "desc": ""}, "varY": {"core": false, "short_desc": "Covariance matrix position y. ", "type": "LOG_FLOAT", "desc": ""}, "varZ": {"core": false, "short_desc": "Covariance matrix position z. ", "type": "LOG_FLOAT", "desc": ""}, "varPX": {"core": false, "short_desc": "Covariance matrix velocity x. ", "type": "LOG_FLOAT", "desc": ""}, "varPY": {"core": false, "short_desc": "Covariance matrix velocity y. ", "type": "LOG_FLOAT", "desc": ""}, "varPZ": {"core": false, "short_desc": "Covariance matrix velocity z. ", "type": "LOG_FLOAT", "desc": ""}, "varD0": {"core": false, "short_desc": "Covariance matrix attitude error roll. ", "type": "LOG_FLOAT", "desc": ""}, "varD1": {"core": false, "short_desc": "Covariance matrix attitude error pitch. ", "type": "LOG_FLOAT", "desc": ""}, "varD2": {"core": false, "short_desc": "Covariance matrix attitude error yaw. ", "type": "LOG_FLOAT", "desc": ""}, "q0": {"core": false, "short_desc": "Estimated Attitude quarternion w. ", "type": "LOG_FLOAT", "desc": ""}, "q1": {"core": false, "short_desc": "Estimated Attitude quarternion x. ", "type": "LOG_FLOAT", "desc": ""}, "q2": {"core": false, "short_desc": "Estimated Attitude quarternion y. ", "type": "LOG_FLOAT", "desc": ""}, "q3": {"core": false, "short_desc": "Estimated Attitude quarternion z. ", "type": "LOG_FLOAT", "desc": ""}, "rtUpdate": {"core": false, "short_desc": "Statistics rate of update step. ", "type": "LOG_FLOAT", "desc": ""}, "rtPred": {"core": false, "short_desc": "Statistics rate of prediction step. ", "type": "LOG_FLOAT", "desc": ""}, "rtFinal": {"core": false, "short_desc": "Statistics rate full estimation step. ", "type": "LOG_FLOAT", "desc": ""}}}, "kalman_pred": {"desc": "Predicted and measured values of the X and Y direction of the flowdeck ", "variables": {"predNX": {"core": false, "short_desc": "Flow sensor predicted dx [pixels/frame]. ", "type": "LOG_FLOAT", "desc": "note: rename to kalmanMM.flowX? "}, "predNY": {"core": false, "short_desc": "Flow sensor predicted dy [pixels/frame]. ", "type": "LOG_FLOAT", "desc": "note: rename to kalmanMM.flowY? "}, "measNX": {"core": false, "short_desc": "Flow sensor measured dx [pixels/frame]. ", "type": "LOG_FLOAT", "desc": "note: This is the same as motion.deltaX, so perhaps remove this? "}, "measNY": {"core": false, "short_desc": "Flow sensor measured dy [pixels/frame]. ", "type": "LOG_FLOAT", "desc": "note: This is the same as motion.deltaY, so perhaps remove this? "}}}, "lhFlasher": {"desc": "", "variables": {"done": {"core": false, "short_desc": "", "type": "LOG_UINT8", "desc": ""}, "code": {"core": false, "short_desc": "", "type": "LOG_UINT32", "desc": ""}}}, "lighthouse": {"desc": "Log group for the lighthouse positioning system ", "variables": {"validAngles": {"core": false, "short_desc": "", "type": "LOG_UINT8", "desc": ""}, "rawAngle0x": {"core": false, "short_desc": "The raw V1 angle received by sensor 0 [rad]. ", "type": "LOG_FLOAT", "desc": "|\u00a0Base station type |\u00a0V1 |\n| Base station | primary |\n| Sweep |\u00a01 |\n| Sensor | 0 |\n"}, "rawAngle0y": {"core": false, "short_desc": "The raw V1 angle received by sensor 0 [rad]. ", "type": "LOG_FLOAT", "desc": "|\u00a0Base station type |\u00a0V1 |\n| Base station | primary |\n| Sweep |\u00a02 |\n| Sensor | 0 |\n"}, "rawAngle1x": {"core": false, "short_desc": "The raw V1 angle received by sensor 0 [rad]. ", "type": "LOG_FLOAT", "desc": "|\u00a0Base station type |\u00a0V1 |\n| Base station | secondary |\n| Sweep |\u00a01 |\n| Sensor | 0 |\n"}, "rawAngle1y": {"core": false, "short_desc": "The raw V1 angle received by sensor 0 [rad]. ", "type": "LOG_FLOAT", "desc": "|\u00a0Base station type |\u00a0V1 |\n| Base station | secondary |\n| Sweep |\u00a02 |\n| Sensor | 0 |\n"}, "angle0x": {"core": false, "short_desc": "The V1 angle received by sensor 0, corrected using calibration data [rad]. ", "type": "LOG_FLOAT", "desc": "|\u00a0Base station type |\u00a0V1 |\n| Base station | primary |\n| Sweep |\u00a01 |\n| Sensor | 0 |\n\n If a base station of type V2 is used, this will contain the V2 angles converted to V1 style for the base station with channel 1. "}, "angle0y": {"core": false, "short_desc": "The V1 angle received by sensor 0, corrected using calibration data [rad]. ", "type": "LOG_FLOAT", "desc": "|\u00a0Base station type |\u00a0V1 |\n| Base station | primary |\n| Sweep |\u00a02 |\n| Sensor | 0 |\n\n If a base station of type V2 is used, this will contain the V2 angles converted to V1 style for the base station with channel 1. "}, "angle1x": {"core": false, "short_desc": "The angle received by sensor 0, corrected using calibration data [rad]. ", "type": "LOG_FLOAT", "desc": "|\u00a0Base station type |\u00a0V1 |\n| Base station | secondary |\n| Sweep |\u00a01 |\n| Sensor | 0 |\n\n If a base station of type V2 is used, this will contain the V2 angles converted to V1 style for the base station with channel 2. "}, "angle1y": {"core": false, "short_desc": "The angle received by sensor 0, corrected using calibration data [rad]. ", "type": "LOG_FLOAT", "desc": "|\u00a0Base station type |\u00a0V1 |\n| Base station | secondary |\n| Sweep |\u00a02 |\n| Sensor | 0 |\n\n If a base station of type V2 is used, this will contain the V2 angles converted to V1 style for the base station with channel 2. "}, "rawAngle0xlh2": {"core": false, "short_desc": "The angle received by sensor 1, corrected using calibration data [rad]. ", "type": "LOG_FLOAT", "desc": "|\u00a0Base station type |\u00a0V1 |\n| Base station | primary |\n| Sweep |\u00a01 |\n| Sensor | 1 |\n\n If a base station of type V2 is used, this will contain the V2 angles converted to V1 style for the base station with channel 1. The V1 angle received by sensor 1, corrected using calibration data [rad]\n\n|\u00a0Base station type |\u00a0V1 |\n| Base station | primary |\n| Sweep |\u00a02 |\n| Sensor | 1 |\n\n If a base station of type V2 is used, this will contain the V2 angles converted to V1 style for the base station with channel 1. The V1 angle received by sensor 1, corrected using calibration data [rad]\n\n|\u00a0Base station type |\u00a0V1 |\n| Base station | secondary |\n| Sweep |\u00a01 |\n| Sensor | 1 |\n\n If a base station of type V2 is used, this will contain the V2 angles converted to V1 style for the base station with channel 2. The V1 angle received by sensor 1, corrected using calibration data [rad]\n\n|\u00a0Base station type |\u00a0V1 |\n| Base station | secondary |\n| Sweep |\u00a02 |\n| Sensor | 1 |\n\n If a base station of type V2 is used, this will contain the V2 angles converted to V1 style for the base station with channel 2. The raw V2 angle received by sensor 0 [rad]\n\n|\u00a0Base station type |\u00a0V2 |\n| Channel | 1 |\n| Sweep |\u00a01 |\n| Sensor | 0 |\n"}, "rawAngle0ylh2": {"core": false, "short_desc": "The raw V2 angle received by sensor 0 [rad]. ", "type": "LOG_FLOAT", "desc": "|\u00a0Base station type |\u00a0V2 |\n| Channel | 1 |\n| Sweep |\u00a02 |\n| Sensor | 0 |\n"}, "rawAngle1xlh2": {"core": false, "short_desc": "The raw V2 angle received by sensor 0 [rad]. ", "type": "LOG_FLOAT", "desc": "|\u00a0Base station type |\u00a0V2 |\n| Channel | 2 |\n| Sweep |\u00a01 |\n| Sensor | 0 |\n"}, "rawAngle1ylh2": {"core": false, "short_desc": "The raw V2 angle received by sensor 0 [rad]. ", "type": "LOG_FLOAT", "desc": "|\u00a0Base station type |\u00a0V2 |\n| Channel | 2 |\n| Sweep |\u00a02 |\n| Sensor | 0 |\n"}, "angle0x_0lh2": {"core": false, "short_desc": "The V2 angle received by sensor 0, corrected using calibration data [rad]. ", "type": "LOG_FLOAT", "desc": "|\u00a0Base station type |\u00a0V2 |\n| Channel | 1 |\n| Sweep |\u00a01 |\n| Sensor | 0 |\n"}, "angle0y_0lh2": {"core": false, "short_desc": "The V2 angle received by sensor 0, corrected using calibration data [rad]. ", "type": "LOG_FLOAT", "desc": "|\u00a0Base station type |\u00a0V2 |\n| Channel | 1 |\n| Sweep |\u00a02 |\n| Sensor | 0 |\n"}, "angle1x_0lh2": {"core": false, "short_desc": "The V2 angle received by sensor 0, corrected using calibration data [rad]. ", "type": "LOG_FLOAT", "desc": "|\u00a0Base station type |\u00a0V2 |\n| Channel | 2 |\n| Sweep |\u00a01 |\n| Sensor | 0 |\n"}, "angle1y_0lh2": {"core": false, "short_desc": "The V2 angle received by sensor 0, corrected using calibration data [rad]. ", "type": "LOG_FLOAT", "desc": "|\u00a0Base station type |\u00a0V2 |\n| Channel | 2 |\n| Sweep |\u00a02 |\n| Sensor | 0 |\n"}, "comSync": {"core": false, "short_desc": "Rate of frames from the Lighthouse deck on the serial buss [1/s]. ", "type": "LOG_UINT8", "desc": "Rate of frames from the Lighthouse deck that contains sweep data [1/s] "}, "bsAvailable": {"core": true, "short_desc": "Bit field indicating which base stations that are available. ", "type": "LOG_UINT16", "desc": "The lowest bit maps to base station channel 1 and the highest to channel 16. "}, "bsReceive": {"core": true, "short_desc": "Bit field indicating which base stations that are received by the lighthouse deck. ", "type": "LOG_UINT16", "desc": "The lowest bit maps to base station channel 1 and the highest to channel 16. "}, "bsActive": {"core": true, "short_desc": "Bit field indicating which base stations that are providing useful data to the estimator. ", "type": "LOG_UINT16", "desc": "A bit will be set if there is calibration and geometry data for the base station, and sweeps are received.\n\nThe lowest bit maps to base station channel 1 and the highest to channel 16. "}, "bsCalUd": {"core": true, "short_desc": "Bit field that indicates which base stations that have received calibration data that was different to what was stored in memory. ", "type": "LOG_UINT16", "desc": "The lowest bit maps to base station channel 1 and the highest to channel 16. "}, "bsCalCon": {"core": true, "short_desc": "Bit field that indicates which base stations that have received calibration data over the air. ", "type": "LOG_UINT16", "desc": "The lowest bit maps to base station channel 1 and the highest to channel 16. "}, "status": {"core": true, "short_desc": "Overall status of the lighthouse system. ", "type": "LOG_UINT8", "desc": "|\u00a0Value |\u00a0Meaning |\n| - | - |\n| 0 | No lighthouse base stations are recevied |\n| 1 | One or more base stations are received but geometry or callibration data is missing |\n| 2 | Base station data is sent to the state estimator |\n "}, "posRt": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "estBs0Rt": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "estBs1Rt": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "x": {"core": true, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "y": {"core": true, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "z": {"core": true, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "delta": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "bsGeoVal": {"core": true, "short_desc": "", "type": "LOG_UINT16", "desc": ""}, "bsCalVal": {"core": true, "short_desc": "", "type": "LOG_UINT16", "desc": ""}}}, "loco": {"desc": "Log group for basic information about the Loco Positioning System ", "variables": {"mode": {"core": true, "short_desc": "The current mode of the Loco Positioning system. ", "type": "LOG_UINT8", "desc": "| Value | Mode | \n| - | - | \n| 1 | TWR | \n| 2 | TDoA 2 | \n| 3 | TDoA 3 | \n "}, "spiWr": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "spiRe": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}}}, "locSrv": {"desc": "Logging variables for (external) positioning data stream through ctrp ", "variables": {"x": {"core": true, "short_desc": "Position X measurement from external system. ", "type": "LOG_FLOAT", "desc": ""}, "y": {"core": true, "short_desc": "Position Y measurement from external system. ", "type": "LOG_FLOAT", "desc": ""}, "z": {"core": true, "short_desc": "Position Z measurement from external system. ", "type": "LOG_FLOAT", "desc": ""}, "qx": {"core": true, "short_desc": "Quaternion x meas from an external system. ", "type": "LOG_FLOAT", "desc": ""}, "qy": {"core": true, "short_desc": "Quaternion y meas from an external system. ", "type": "LOG_FLOAT", "desc": ""}, "qz": {"core": true, "short_desc": "Quaternion z meas from an external system. ", "type": "LOG_FLOAT", "desc": ""}, "qw": {"core": true, "short_desc": "Quaternion w meas from an external system. ", "type": "LOG_FLOAT", "desc": ""}}}, "locSrvZ": {"desc": "Logging variables for (external) positioning data stream through Compressed ", "variables": {"tick": {"core": true, "short_desc": "time when data was received last (ms/ticks) ", "type": "LOG_UINT16", "desc": ""}}}, "mag": {"desc": "Log group for magnetometer.\n\nCurrently only present on Crazyflie 2.0 ", "variables": {"x": {"core": true, "short_desc": "Magnetometer X axis, after filtering [gauss]. ", "type": "LOG_FLOAT", "desc": ""}, "y": {"core": true, "short_desc": "Magnetometer Y axis, after filtering [gauss]. ", "type": "LOG_FLOAT", "desc": ""}, "z": {"core": true, "short_desc": "Magnetometer Z axis, after filtering [gauss]. ", "type": "LOG_FLOAT", "desc": ""}}}, "memTst": {"desc": "", "variables": {"errCntW": {"core": false, "short_desc": "", "type": "LOG_UINT32", "desc": ""}}}, "motion": {"desc": "Logging variables of the motion sensor of the flowdeck ", "variables": {"motion": {"core": false, "short_desc": "True if motion occurred since the last measurement. ", "type": "LOG_UINT8", "desc": ""}, "deltaX": {"core": false, "short_desc": "Flow X measurement [flow/fr]. ", "type": "LOG_INT16", "desc": ""}, "deltaY": {"core": false, "short_desc": "Flow Y measurement [flow/fr]. ", "type": "LOG_INT16", "desc": ""}, "shutter": {"core": false, "short_desc": "Shutter time [clock cycles]. ", "type": "LOG_UINT16", "desc": ""}, "maxRaw": {"core": false, "short_desc": "Maximum raw data value in frame. ", "type": "LOG_UINT8", "desc": ""}, "minRaw": {"core": false, "short_desc": "Minimum raw data value in frame. ", "type": "LOG_UINT8", "desc": ""}, "Rawsum": {"core": false, "short_desc": "Average raw data value. ", "type": "LOG_UINT8", "desc": ""}, "outlierCount": {"core": false, "short_desc": "Counted flow outliers excluded from the estimator. ", "type": "LOG_UINT8", "desc": ""}, "squal": {"core": false, "short_desc": "Count of surface feature. ", "type": "LOG_UINT8", "desc": ""}, "std": {"core": false, "short_desc": "Standard deviation of flow measurement. ", "type": "LOG_FLOAT", "desc": ""}}}, "motor": {"desc": "Motor output related log variables. ", "variables": {"m1": {"core": true, "short_desc": "Motor power (PWM value) for M1 [0 - UINT16_MAX]. ", "type": "LOG_UINT32", "desc": ""}, "m2": {"core": true, "short_desc": "Motor power (PWM value) for M2 [0 - UINT16_MAX]. ", "type": "LOG_UINT32", "desc": ""}, "m3": {"core": true, "short_desc": "Motor power (PWM value) for M3 [0 - UINT16_MAX]. ", "type": "LOG_UINT32", "desc": ""}, "m4": {"core": true, "short_desc": "Motor power (PWM value) for M4 [0 - UINT16_MAX]. ", "type": "LOG_UINT32", "desc": ""}, "m1req": {"core": false, "short_desc": "Requested motor power for m1, including battery compensation. Same scale as the motor PWM but uncapped and may have values outside the [0 - UINT16_MAX] range. ", "type": "LOG_INT32", "desc": ""}, "m2req": {"core": false, "short_desc": "Requested motor power for m1, including battery compensation. Same scale as the motor PWM but uncapped and may have values outside the [0 - UINT16_MAX] range. ", "type": "LOG_INT32", "desc": ""}, "m3req": {"core": false, "short_desc": "Requested motor power for m1, including battery compensation. Same scale as the motor PWM but uncapped and may have values outside the [0 - UINT16_MAX] range. ", "type": "LOG_INT32", "desc": ""}, "m4req": {"core": false, "short_desc": "Requested motor power for m1, including battery compensation. Same scale as the motor PWM but uncapped and may have values outside the [0 - UINT16_MAX] range. ", "type": "LOG_INT32", "desc": ""}}}, "navFilter": {"desc": "Log groups for the navigation filter associated with the error-state Unscented Kalman Filter (experimental) ", "variables": {"posX": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "posY": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "posZ": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "accX": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "accY": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "accZ": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "omegaX": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "omegaY": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "omegaZ": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "Phi": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "Theta": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "Psi": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "Px": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "Pvx": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "Pattx": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "nanCounter": {"core": false, "short_desc": "", "type": "LOG_UINT32", "desc": ""}, "range": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "procTimeFilter": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "recAnchorId": {"core": false, "short_desc": "", "type": "LOG_UINT8", "desc": ""}}}, "oa": {"desc": "", "variables": {"front": {"core": false, "short_desc": "", "type": "LOG_UINT16", "desc": ""}, "back": {"core": false, "short_desc": "", "type": "LOG_UINT16", "desc": ""}, "up": {"core": false, "short_desc": "", "type": "LOG_UINT16", "desc": ""}, "left": {"core": false, "short_desc": "", "type": "LOG_UINT16", "desc": ""}, "right": {"core": false, "short_desc": "", "type": "LOG_UINT16", "desc": ""}}}, "outlierf": {"desc": "", "variables": {"lhWin": {"core": false, "short_desc": "", "type": "LOG_INT32", "desc": ""}, "bucket0": {"core": false, "short_desc": "", "type": "LOG_INT32", "desc": ""}, "bucket1": {"core": false, "short_desc": "", "type": "LOG_INT32", "desc": ""}, "bucket2": {"core": false, "short_desc": "", "type": "LOG_INT32", "desc": ""}, "bucket3": {"core": false, "short_desc": "", "type": "LOG_INT32", "desc": ""}, "bucket4": {"core": false, "short_desc": "", "type": "LOG_INT32", "desc": ""}, "accLev": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "errD": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}}}, "pid_attitude": {"desc": "Log variables of attitude PID controller ", "variables": {"roll_outP": {"core": false, "short_desc": "Proportional output roll. ", "type": "LOG_FLOAT", "desc": ""}, "roll_outI": {"core": false, "short_desc": "Integral output roll. ", "type": "LOG_FLOAT", "desc": ""}, "roll_outD": {"core": false, "short_desc": "Derivative output roll. ", "type": "LOG_FLOAT", "desc": ""}, "roll_outFF": {"core": false, "short_desc": "Feedforward output roll. ", "type": "LOG_FLOAT", "desc": ""}, "pitch_outP": {"core": false, "short_desc": "Proportional output pitch. ", "type": "LOG_FLOAT", "desc": ""}, "pitch_outI": {"core": false, "short_desc": "Integral output pitch. ", "type": "LOG_FLOAT", "desc": ""}, "pitch_outD": {"core": false, "short_desc": "Derivative output pitch. ", "type": "LOG_FLOAT", "desc": ""}, "pitch_outFF": {"core": false, "short_desc": "Feedforward output pitch. ", "type": "LOG_FLOAT", "desc": ""}, "yaw_outP": {"core": false, "short_desc": "Proportional output yaw. ", "type": "LOG_FLOAT", "desc": ""}, "yaw_outI": {"core": false, "short_desc": "Intergal output yaw. ", "type": "LOG_FLOAT", "desc": ""}, "yaw_outD": {"core": false, "short_desc": "Derivative output yaw. ", "type": "LOG_FLOAT", "desc": ""}, "yaw_outFF": {"core": false, "short_desc": "Feedforward output yaw. ", "type": "LOG_FLOAT", "desc": ""}}}, "pid_rate": {"desc": "Log variables of attitude rate PID controller ", "variables": {"roll_outP": {"core": false, "short_desc": "Proportional output roll rate. ", "type": "LOG_FLOAT", "desc": ""}, "roll_outI": {"core": false, "short_desc": "Integral output roll rate. ", "type": "LOG_FLOAT", "desc": ""}, "roll_outD": {"core": false, "short_desc": "Derivative output roll rate. ", "type": "LOG_FLOAT", "desc": ""}, "roll_outFF": {"core": false, "short_desc": "Feedforward output roll rate. ", "type": "LOG_FLOAT", "desc": ""}, "pitch_outP": {"core": false, "short_desc": "Proportional output pitch rate. ", "type": "LOG_FLOAT", "desc": ""}, "pitch_outI": {"core": false, "short_desc": "Integral output pitch rate. ", "type": "LOG_FLOAT", "desc": ""}, "pitch_outD": {"core": false, "short_desc": "Derivative output pitch rate. ", "type": "LOG_FLOAT", "desc": ""}, "pitch_outFF": {"core": false, "short_desc": "Feedforward output pitch rate. ", "type": "LOG_FLOAT", "desc": ""}, "yaw_outP": {"core": false, "short_desc": "Proportional output yaw rate. ", "type": "LOG_FLOAT", "desc": ""}, "yaw_outI": {"core": false, "short_desc": "Integral output yaw rate. ", "type": "LOG_FLOAT", "desc": ""}, "yaw_outD": {"core": false, "short_desc": "Derivative output yaw rate. ", "type": "LOG_FLOAT", "desc": ""}, "yaw_outFF": {"core": false, "short_desc": "Feedforward output yaw rate. ", "type": "LOG_FLOAT", "desc": ""}}}, "pm": {"desc": "Power management log variables. ", "variables": {"vbat": {"core": true, "short_desc": "Battery voltage [V]. ", "type": "LOG_FLOAT", "desc": ""}, "vbatMV": {"core": false, "short_desc": "Battery voltage [mV]. ", "type": "LOG_UINT16", "desc": ""}, "extVbat": {"core": false, "short_desc": "BigQuad external voltage measurement [V]. ", "type": "LOG_FLOAT", "desc": ""}, "extVbatMV": {"core": false, "short_desc": "BigQuad external voltage measurement [mV]. ", "type": "LOG_UINT16", "desc": ""}, "extCurr": {"core": false, "short_desc": "BigQuad external current measurement [V]. ", "type": "LOG_FLOAT", "desc": ""}, "chargeCurrent": {"core": false, "short_desc": "Battery charge current [A]. ", "type": "LOG_FLOAT", "desc": ""}, "state": {"core": true, "short_desc": "State of power management. ", "type": "LOG_INT8", "desc": "| State | Meaning | \n| - | - | \n| 0 | Battery | \n| 1 | Charging | \n| 2 | Charged | \n| 3 | Low power | \n| 4 | Shutdown | \n "}, "batteryLevel": {"core": true, "short_desc": "Battery charge level [%]. ", "type": "LOG_UINT8", "desc": ""}}}, "posCtl": {"desc": "Log variables of the PID position controller\n\nNote: rename to posCtrlPID ? ", "variables": {"targetVX": {"core": false, "short_desc": "PID controller target desired body-yaw-aligned velocity x [m/s]. ", "type": "LOG_FLOAT", "desc": "Note: Same as stabilizer log "}, "targetVY": {"core": false, "short_desc": "PID controller target desired body-yaw-aligned velocity y [m/s]. ", "type": "LOG_FLOAT", "desc": "Note: Same as stabilizer log "}, "targetVZ": {"core": false, "short_desc": "PID controller target desired velocity z [m/s]. ", "type": "LOG_FLOAT", "desc": "Note: Same as stabilizer log "}, "targetX": {"core": false, "short_desc": "PID controller target desired body-yaw-aligned position x [m]. ", "type": "LOG_FLOAT", "desc": "Note: Same as stabilizer log "}, "targetY": {"core": false, "short_desc": "PID controller target desired body-yaw-aligned position y [m]. ", "type": "LOG_FLOAT", "desc": "Note: Same as stabilizer log "}, "targetZ": {"core": false, "short_desc": "PID controller target desired global position z [m]. ", "type": "LOG_FLOAT", "desc": "Note: Same as stabilizer log "}, "bodyVX": {"core": false, "short_desc": "PID state body-yaw-aligned velocity x [m/s]. ", "type": "LOG_FLOAT", "desc": ""}, "bodyVY": {"core": false, "short_desc": "PID state body-yaw-aligned velocity y [m/s]. ", "type": "LOG_FLOAT", "desc": ""}, "bodyX": {"core": false, "short_desc": "PID state body-yaw-aligned position x [m]. ", "type": "LOG_FLOAT", "desc": ""}, "bodyY": {"core": false, "short_desc": "PID state body-yaw-aligned position y [m]. ", "type": "LOG_FLOAT", "desc": ""}, "Xp": {"core": false, "short_desc": "PID proportional output position x. ", "type": "LOG_FLOAT", "desc": ""}, "Xi": {"core": false, "short_desc": "PID integral output position x. ", "type": "LOG_FLOAT", "desc": ""}, "Xd": {"core": false, "short_desc": "PID derivative output position x. ", "type": "LOG_FLOAT", "desc": ""}, "Xff": {"core": false, "short_desc": "PID feedforward output position x. ", "type": "LOG_FLOAT", "desc": ""}, "Yp": {"core": false, "short_desc": "PID proportional output position y. ", "type": "LOG_FLOAT", "desc": ""}, "Yi": {"core": false, "short_desc": "PID integral output position y. ", "type": "LOG_FLOAT", "desc": ""}, "Yd": {"core": false, "short_desc": "PID derivative output position y. ", "type": "LOG_FLOAT", "desc": ""}, "Yff": {"core": false, "short_desc": "PID feedforward output position y. ", "type": "LOG_FLOAT", "desc": ""}, "Zp": {"core": false, "short_desc": "PID proportional output position z. ", "type": "LOG_FLOAT", "desc": ""}, "Zi": {"core": false, "short_desc": "PID integral output position z. ", "type": "LOG_FLOAT", "desc": ""}, "Zd": {"core": false, "short_desc": "PID derivative output position z. ", "type": "LOG_FLOAT", "desc": ""}, "Zff": {"core": false, "short_desc": "PID feedforward output position z. ", "type": "LOG_FLOAT", "desc": ""}, "VXp": {"core": false, "short_desc": "PID proportional output velocity x. ", "type": "LOG_FLOAT", "desc": ""}, "VXi": {"core": false, "short_desc": "PID integral output velocity x. ", "type": "LOG_FLOAT", "desc": ""}, "VXd": {"core": false, "short_desc": "PID derivative output velocity x. ", "type": "LOG_FLOAT", "desc": ""}, "VXff": {"core": false, "short_desc": "PID feedforward output velocity x. ", "type": "LOG_FLOAT", "desc": ""}, "VYp": {"core": false, "short_desc": "PID proportional output velocity y. ", "type": "LOG_FLOAT", "desc": ""}, "VYi": {"core": false, "short_desc": "PID integral output velocity y. ", "type": "LOG_FLOAT", "desc": ""}, "VYd": {"core": false, "short_desc": "PID derivative output velocity y. ", "type": "LOG_FLOAT", "desc": ""}, "VYff": {"core": false, "short_desc": "PID feedforward output velocity y. ", "type": "LOG_FLOAT", "desc": ""}, "VZp": {"core": false, "short_desc": "PID proportional output velocity z. ", "type": "LOG_FLOAT", "desc": ""}, "VZi": {"core": false, "short_desc": "PID integral output velocity z. ", "type": "LOG_FLOAT", "desc": ""}, "VZd": {"core": false, "short_desc": "PID integral output velocity z. ", "type": "LOG_FLOAT", "desc": ""}, "VZff": {"core": false, "short_desc": "PID feedforward output velocity z. ", "type": "LOG_FLOAT", "desc": ""}}}, "posCtrlIndi": {"desc": "", "variables": {"posRef_x": {"core": false, "short_desc": "INDI position reference input x [m]. ", "type": "LOG_FLOAT", "desc": ""}, "posRef_y": {"core": false, "short_desc": "INDI position reference input y [m]. ", "type": "LOG_FLOAT", "desc": ""}, "posRef_z": {"core": false, "short_desc": "INDI position reference input z [m]. ", "type": "LOG_FLOAT", "desc": ""}, "velS_x": {"core": false, "short_desc": "INDI current velocity x [m/s]. ", "type": "LOG_FLOAT", "desc": ""}, "velS_y": {"core": false, "short_desc": "INDI current velocity y [m/s]. ", "type": "LOG_FLOAT", "desc": ""}, "velS_z": {"core": false, "short_desc": "INDI current velocity z [m/s]. ", "type": "LOG_FLOAT", "desc": ""}, "velRef_x": {"core": false, "short_desc": "INDI velocity reference input x [m/s]. ", "type": "LOG_FLOAT", "desc": ""}, "velRef_y": {"core": false, "short_desc": "INDI velocity reference input y [m/s]. ", "type": "LOG_FLOAT", "desc": ""}, "velRef_z": {"core": false, "short_desc": "INDI velocity reference input z [m/s]. ", "type": "LOG_FLOAT", "desc": ""}, "angS_roll": {"core": false, "short_desc": "INDI current attitude roll angle [rad]. ", "type": "LOG_FLOAT", "desc": ""}, "angS_pitch": {"core": false, "short_desc": "INDI current attitude pitch angle [rad]. ", "type": "LOG_FLOAT", "desc": ""}, "angS_yaw": {"core": false, "short_desc": "INDI current attitude yaw angle [rad]. ", "type": "LOG_FLOAT", "desc": ""}, "angF_roll": {"core": false, "short_desc": "INDI current attitude roll angle filtered (8 Hz low-pass) [rad]. ", "type": "LOG_FLOAT", "desc": ""}, "angF_pitch": {"core": false, "short_desc": "INDI current attitude pitch angle filtered (8 Hz low-pass) [rad]. ", "type": "LOG_FLOAT", "desc": ""}, "angF_yaw": {"core": false, "short_desc": "INDI current attitude yaw angle filtered (8 Hz low-pass) [rad]. ", "type": "LOG_FLOAT", "desc": ""}, "accRef_x": {"core": false, "short_desc": "INDI linear acceleration reference input x [m/s^2], NED frame. ", "type": "LOG_FLOAT", "desc": ""}, "accRef_y": {"core": false, "short_desc": "INDI linear acceleration reference input y [m/s^2], NED frame. ", "type": "LOG_FLOAT", "desc": ""}, "accRef_z": {"core": false, "short_desc": "INDI linear acceleration reference input z [m/s^2], NED frame. ", "type": "LOG_FLOAT", "desc": ""}, "accS_x": {"core": false, "short_desc": "INDI current linear acceleration measurement x [m/s^2], body frame. ", "type": "LOG_FLOAT", "desc": ""}, "accS_y": {"core": false, "short_desc": "INDI current linear acceleration measurement z [m/s^2], body frame. ", "type": "LOG_FLOAT", "desc": ""}, "accS_z": {"core": false, "short_desc": "INDI current linear acceleration measurement z [m/s^2], body frame. ", "type": "LOG_FLOAT", "desc": ""}, "accF_x": {"core": false, "short_desc": "INDI current linear acceleration measurement filtered (8 Hz low-pass) x [m/s^2], body frame. ", "type": "LOG_FLOAT", "desc": ""}, "accF_y": {"core": false, "short_desc": "INDI current linear acceleration measurement filtered (8 Hz low-pass) y [m/s^2], body frame. ", "type": "LOG_FLOAT", "desc": ""}, "accF_z": {"core": false, "short_desc": "INDI current linear acceleration measurement filtered (8 Hz low-pass) z [m/s^2], body frame. ", "type": "LOG_FLOAT", "desc": ""}, "accFT_x": {"core": false, "short_desc": "INDI current linear acceleration measurement filtered (8 Hz low-pass) and rotated x [m/s^2], NED frame. ", "type": "LOG_FLOAT", "desc": ""}, "accFT_y": {"core": false, "short_desc": "INDI current linear acceleration measurement filtered (8 Hz low-pass) and rotated y [m/s^2], NED frame. ", "type": "LOG_FLOAT", "desc": ""}, "accFT_z": {"core": false, "short_desc": "INDI current linear acceleration measurement filtered (8 Hz low-pass) and rotated z [m/s^2], NED frame. ", "type": "LOG_FLOAT", "desc": ""}, "accErr_x": {"core": false, "short_desc": "INDI linear acceleration error x [m/s^2], NED frame. ", "type": "LOG_FLOAT", "desc": ""}, "accErr_y": {"core": false, "short_desc": "INDI linear acceleration error y [m/s^2], NED frame. ", "type": "LOG_FLOAT", "desc": ""}, "accErr_z": {"core": false, "short_desc": "INDI linear acceleration error z [m/s^2], NED frame. ", "type": "LOG_FLOAT", "desc": ""}, "phi_tilde": {"core": false, "short_desc": "INDI roll angle command increment [rad]. ", "type": "LOG_FLOAT", "desc": ""}, "theta_tilde": {"core": false, "short_desc": "INDI pitch angle command increment [rad]. ", "type": "LOG_FLOAT", "desc": ""}, "T_tilde": {"core": false, "short_desc": "INDI thrust command increment [motor units]. ", "type": "LOG_FLOAT", "desc": ""}, "T_inner": {"core": false, "short_desc": "INDI final previous thrust command, filtered with low-pass and passed through actuator dynamics. ", "type": "LOG_FLOAT", "desc": ""}, "T_inner_f": {"core": false, "short_desc": "INDI previous thrust command filtered (8 Hz low-pass) [motor units]. ", "type": "LOG_FLOAT", "desc": ""}, "T_incremented": {"core": false, "short_desc": "INDI motor thrust command provided to inner loop [motor units]. ", "type": "LOG_FLOAT", "desc": ""}, "cmd_phi": {"core": false, "short_desc": "INDI roll angle command to inner loop [rad]. ", "type": "LOG_FLOAT", "desc": ""}, "cmd_theta": {"core": false, "short_desc": "INDI pitch angle command to inner loop [rad]. ", "type": "LOG_FLOAT", "desc": ""}}}, "posEstAlt": {"desc": "", "variables": {"estimatedZ": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "estVZ": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "velocityZ": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}}}, "radio": {"desc": "", "variables": {"rssi": {"core": true, "short_desc": "", "type": "LOG_UINT8", "desc": ""}, "isConnected": {"core": true, "short_desc": "", "type": "LOG_UINT8", "desc": ""}}}, "range": {"desc": "Log group for the multi ranger and Z-ranger decks ", "variables": {"front": {"core": true, "short_desc": "Distance from the front sensor to an obstacle [mm]. ", "type": "LOG_UINT16", "desc": ""}, "back": {"core": true, "short_desc": "Distance from the back sensor to an obstacle [mm]. ", "type": "LOG_UINT16", "desc": ""}, "up": {"core": true, "short_desc": "Distance from the top sensor to an obstacle [mm]. ", "type": "LOG_UINT16", "desc": ""}, "left": {"core": true, "short_desc": "Distance from the left sensor to an obstacle [mm]. ", "type": "LOG_UINT16", "desc": ""}, "right": {"core": true, "short_desc": "Distance from the right sensor to an obstacle [mm]. ", "type": "LOG_UINT16", "desc": ""}, "zrange": {"core": true, "short_desc": "Distance from the Z-ranger (bottom) sensor to an obstacle [mm]. ", "type": "LOG_UINT16", "desc": ""}}}, "ranging": {"desc": "Log group for distances (ranges) to anchors aquired by Two Way Ranging (TWR) ", "variables": {"state": {"core": false, "short_desc": "", "type": "LOG_UINT16", "desc": ""}}}, "ring": {"desc": "The logs for the LED ring expansion deck contains two powerful front-facing white LEDs and 12 bottom-facing RGB individually addressable LEDs (it uses the same LEDs as used in the NeoPixel products by Adafruit).\n\nThe deck is designed to be installed as the last deck on the bottom of the quad. It does not have pass-through holes for the expansion port connector. ", "variables": {"fadeTime": {"core": false, "short_desc": "Current fade time of fade color effect. ", "type": "LOG_FLOAT", "desc": ""}}}, "sensfusion6": {"desc": "Sensor fusion is the process of combining sensory data or data derived from disparate sources such that the resulting information has less uncertainty than would be possible when these sources were used individually.\n\nThe sensfusion6 module uses an 3 axis accelerometer and a 3 axis gyro to get accurate attitude measurements. ", "variables": {"qw": {"core": false, "short_desc": "W quaternion. ", "type": "LOG_FLOAT", "desc": ""}, "qx": {"core": false, "short_desc": "X quaternion. ", "type": "LOG_FLOAT", "desc": ""}, "qy": {"core": false, "short_desc": "y quaternion ", "type": "LOG_FLOAT", "desc": ""}, "qz": {"core": false, "short_desc": "z quaternion ", "type": "LOG_FLOAT", "desc": ""}, "gravityX": {"core": false, "short_desc": "Gravity vector X. ", "type": "LOG_FLOAT", "desc": ""}, "gravityY": {"core": false, "short_desc": "Gravity vector Y. ", "type": "LOG_FLOAT", "desc": ""}, "gravityZ": {"core": false, "short_desc": "Gravity vector Z. ", "type": "LOG_FLOAT", "desc": ""}, "accZbase": {"core": false, "short_desc": "Gravity scale factor after calibration. ", "type": "LOG_FLOAT", "desc": ""}, "isInit": {"core": false, "short_desc": "Nonzero if complimentary filter been initialized. ", "type": "LOG_UINT8", "desc": ""}, "isCalibrated": {"core": false, "short_desc": "Nonzero if gravity scale been calibrated. ", "type": "LOG_UINT8", "desc": ""}}}, "sensorFilter": {"desc": "Log groups for error-state Unscented Kalman Filter (experimental) ", "variables": {"dxPx": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "dyPx": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "dxPxPred": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "dyPxPred": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "distPred": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "distMeas": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "baroHeight": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "innoChFlow_x": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "innoChFlow_y": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "innoChTof": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "distTWR": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}}}, "stabilizer": {"desc": "Logs to set the estimator and controller type for the stabilizer module ", "variables": {"roll": {"core": false, "short_desc": "Estimated roll Note: Same as stateEstimate.roll. ", "type": "LOG_FLOAT", "desc": ""}, "pitch": {"core": false, "short_desc": "Estimated pitch Note: Same as stateEstimate.pitch. ", "type": "LOG_FLOAT", "desc": ""}, "yaw": {"core": false, "short_desc": "Estimated yaw Note: same as stateEstimate.yaw. ", "type": "LOG_FLOAT", "desc": ""}, "thrust": {"core": false, "short_desc": "Current thrust. ", "type": "LOG_FLOAT", "desc": ""}, "rtStab": {"core": false, "short_desc": "Rate of stabilizer loop. ", "type": "LOG_FLOAT", "desc": ""}, "intToOut": {"core": false, "short_desc": "Latency from sampling of sensor to motor output Note: Used for debugging but could also be used as a system test. ", "type": "LOG_UINT32", "desc": ""}}}, "stateEstimate": {"desc": "Log group for the state estimator, the currently estimated state of the platform.\n\nNote: all values may not be updated depending on which estimator that is used. ", "variables": {"x": {"core": true, "short_desc": "The estimated position of the platform in the global reference frame, X [m]. ", "type": "LOG_FLOAT", "desc": ""}, "y": {"core": true, "short_desc": "The estimated position of the platform in the global reference frame, Y [m]. ", "type": "LOG_FLOAT", "desc": ""}, "z": {"core": true, "short_desc": "The estimated position of the platform in the global reference frame, Z [m]. ", "type": "LOG_FLOAT", "desc": ""}, "vx": {"core": true, "short_desc": "The velocity of the Crazyflie in the global reference frame, X [m/s]. ", "type": "LOG_FLOAT", "desc": ""}, "vy": {"core": true, "short_desc": "The velocity of the Crazyflie in the global reference frame, Y [m/s]. ", "type": "LOG_FLOAT", "desc": ""}, "vz": {"core": true, "short_desc": "The velocity of the Crazyflie in the global reference frame, Z [m/s]. ", "type": "LOG_FLOAT", "desc": ""}, "ax": {"core": true, "short_desc": "The acceleration of the Crazyflie in the global reference frame, X [Gs]. ", "type": "LOG_FLOAT", "desc": ""}, "ay": {"core": true, "short_desc": "The acceleration of the Crazyflie in the global reference frame, Y [Gs]. ", "type": "LOG_FLOAT", "desc": ""}, "az": {"core": true, "short_desc": "The acceleration of the Crazyflie in the global reference frame, without considering gravity, Z [Gs]. ", "type": "LOG_FLOAT", "desc": ""}, "roll": {"core": true, "short_desc": "Attitude, roll angle [deg]. ", "type": "LOG_FLOAT", "desc": ""}, "pitch": {"core": true, "short_desc": "Attitude, pitch angle (legacy CF2 body coordinate system, where pitch is inverted) [deg]. ", "type": "LOG_FLOAT", "desc": ""}, "yaw": {"core": true, "short_desc": "Attitude, yaw angle [deg]. ", "type": "LOG_FLOAT", "desc": ""}, "qx": {"core": true, "short_desc": "Attitude as a quaternion, x. ", "type": "LOG_FLOAT", "desc": ""}, "qy": {"core": true, "short_desc": "Attitude as a quaternion, y. ", "type": "LOG_FLOAT", "desc": ""}, "qz": {"core": true, "short_desc": "Attitude as a quaternion, z. ", "type": "LOG_FLOAT", "desc": ""}, "qw": {"core": true, "short_desc": "Attitude as a quaternion, w. ", "type": "LOG_FLOAT", "desc": ""}}}, "stateEstimateZ": {"desc": "Log group for the state estimator, compressed format. This flavour of the estimator logs are defined with types that use less space and makes it possible to add more logs to a log configuration.\n\nNote: all values may not be updated depending on which estimator that is used. ", "variables": {"x": {"core": false, "short_desc": "The position of the Crazyflie in the global reference frame, X [mm]. ", "type": "LOG_INT16", "desc": ""}, "y": {"core": false, "short_desc": "The position of the Crazyflie in the global reference frame, Y [mm]. ", "type": "LOG_INT16", "desc": ""}, "z": {"core": false, "short_desc": "The position of the Crazyflie in the global reference frame, Z [mm]. ", "type": "LOG_INT16", "desc": ""}, "vx": {"core": false, "short_desc": "The velocity of the Crazyflie in the global reference frame, X [mm/s]. ", "type": "LOG_INT16", "desc": ""}, "vy": {"core": false, "short_desc": "The velocity of the Crazyflie in the global reference frame, Y [mm/s]. ", "type": "LOG_INT16", "desc": ""}, "vz": {"core": false, "short_desc": "The velocity of the Crazyflie in the global reference frame, Z [mm/s]. ", "type": "LOG_INT16", "desc": ""}, "ax": {"core": false, "short_desc": "The acceleration of the Crazyflie in the global reference frame, X [mm/s]. ", "type": "LOG_INT16", "desc": ""}, "ay": {"core": false, "short_desc": "The acceleration of the Crazyflie in the global reference frame, Y [mm/s]. ", "type": "LOG_INT16", "desc": ""}, "az": {"core": false, "short_desc": "The acceleration of the Crazyflie in the global reference frame, including gravity, Z [mm/s]. ", "type": "LOG_INT16", "desc": ""}, "quat": {"core": false, "short_desc": "Attitude as a compressed quaternion, see see ", "type": "LOG_UINT32", "desc": ""}, "rateRoll": {"core": false, "short_desc": "Roll rate (angular velocity) [milliradians / sec]. ", "type": "LOG_INT16", "desc": ""}, "ratePitch": {"core": false, "short_desc": "Pitch rate (angular velocity) [milliradians / sec]. ", "type": "LOG_INT16", "desc": ""}, "rateYaw": {"core": false, "short_desc": "Yaw rate (angular velocity) [milliradians / sec]. ", "type": "LOG_INT16", "desc": ""}}}, "sys": {"desc": "System loggable variables to check different system states. ", "variables": {"canfly": {"core": true, "short_desc": "If nonzero if system is ready to fly. ", "type": "LOG_UINT8", "desc": ""}, "isFlying": {"core": true, "short_desc": "Nonzero if the system thinks it is flying. ", "type": "LOG_UINT8", "desc": ""}, "isTumbled": {"core": true, "short_desc": "Nonzero if the system thinks it is tumbled/crashed. ", "type": "LOG_UINT8", "desc": ""}, "armed": {"core": false, "short_desc": "If zero, arming system is preventing motors to start. ", "type": "LOG_INT8", "desc": ""}}}, "tdoa2": {"desc": "", "variables": {"d7": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "d0": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "d1": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "d2": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "d3": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "d4": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "d5": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "d6": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "cc0": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "cc1": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "cc2": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "cc3": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "cc4": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "cc5": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "cc6": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "cc7": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "dist7": {"core": false, "short_desc": "", "type": "LOG_UINT16", "desc": ""}, "dist0": {"core": false, "short_desc": "", "type": "LOG_UINT16", "desc": ""}, "dist1": {"core": false, "short_desc": "", "type": "LOG_UINT16", "desc": ""}, "dist2": {"core": false, "short_desc": "", "type": "LOG_UINT16", "desc": ""}, "dist3": {"core": false, "short_desc": "", "type": "LOG_UINT16", "desc": ""}, "dist4": {"core": false, "short_desc": "", "type": "LOG_UINT16", "desc": ""}, "dist5": {"core": false, "short_desc": "", "type": "LOG_UINT16", "desc": ""}, "dist6": {"core": false, "short_desc": "", "type": "LOG_UINT16", "desc": ""}}}, "tdoaEngine": {"desc": "Log group for the TDoA engine module.\n\nSome of the logs in this group use the parameters tdoaEngine.logId and tdoaEngine.logOthrId as selectors for which anchors to log. ", "variables": {"stRx": {"core": false, "short_desc": "UWB packet receive rate [1/s]. This is the raw receive rate before data has been examined and possibly discarded. ", "type": "LOG_FLOAT", "desc": ""}, "stEst": {"core": false, "short_desc": "Rate of data sent to the state estimator [1/s]. This is the rate of useful data after all checks. ", "type": "LOG_FLOAT", "desc": ""}, "stTime": {"core": false, "short_desc": "Rate of packets with a time stamp that seems to be reasonable [1/s]. ", "type": "LOG_FLOAT", "desc": ""}, "stFound": {"core": false, "short_desc": "Rate of packets that could be matched with an anchor to calculate a TDoA value [1/s]. ", "type": "LOG_FLOAT", "desc": ""}, "stCc": {"core": false, "short_desc": "Rate of packets where the time stamp is used to update the clock correction factor for an anchor [1/s]. ", "type": "LOG_FLOAT", "desc": ""}, "stHit": {"core": false, "short_desc": "Rate of hits when looking up anchor contexts for packets [1/s]. ", "type": "LOG_FLOAT", "desc": ""}, "stMiss": {"core": false, "short_desc": "Rate of misses when looking up anchor contexts for packets [1/s]. ", "type": "LOG_FLOAT", "desc": "If this number is high, the CF is receiving packets from more anchors than can be stored in the TDoA storage. "}, "cc": {"core": false, "short_desc": "The clock correction factor for the anchor with the id selected by the tdoaEngine.logId parameter. ", "type": "LOG_FLOAT", "desc": ""}, "tof": {"core": false, "short_desc": "The Time Of Flight from anchor A to anchor B (including antenna delay), as measured by anchor A [UWB radio ticks]. ", "type": "LOG_UINT16", "desc": "A is selected using the tdoaEngine.logId parameter and B is selected by tdoaEngine.logOthrId. "}, "tdoa": {"core": false, "short_desc": "The difference in distance to anchor A and B, as measured by the Crazyflie [m]. ", "type": "LOG_FLOAT", "desc": "A is selected using the tdoaEngine.logId parameter and B is selected by tdoaEngine.logOthrId. "}}}, "twr": {"desc": "Log group for Two Way Ranging data ", "variables": {"rangingSuccessRate0": {"core": false, "short_desc": "Successful ranging ratio with anchor 0 [%]. ", "type": "LOG_UINT8", "desc": ""}, "rangingPerSec0": {"core": false, "short_desc": "Ranging attempt rate with anchor 0 [1/s]. ", "type": "LOG_UINT8", "desc": ""}, "rangingSuccessRate1": {"core": false, "short_desc": "Successful ranging ratio with anchor 1 [%]. ", "type": "LOG_UINT8", "desc": ""}, "rangingPerSec1": {"core": false, "short_desc": "Ranging attempt rate with anchor 1 [1/s]. ", "type": "LOG_UINT8", "desc": ""}, "rangingSuccessRate2": {"core": false, "short_desc": "Successful ranging ratio with anchor 2 [%]. ", "type": "LOG_UINT8", "desc": ""}, "rangingPerSec2": {"core": false, "short_desc": "Ranging attempt rate with anchor 2 [1/s]. ", "type": "LOG_UINT8", "desc": ""}, "rangingSuccessRate3": {"core": false, "short_desc": "Successful ranging ratio with anchor 3 [%]. ", "type": "LOG_UINT8", "desc": ""}, "rangingPerSec3": {"core": false, "short_desc": "Ranging attempt rate with anchor 3 [1/s]. ", "type": "LOG_UINT8", "desc": ""}, "rangingSuccessRate4": {"core": false, "short_desc": "Successful ranging ratio with anchor 4 [%]. ", "type": "LOG_UINT8", "desc": ""}, "rangingPerSec4": {"core": false, "short_desc": "Ranging attempt rate with anchor 4 [1/s]. ", "type": "LOG_UINT8", "desc": ""}, "rangingSuccessRate5": {"core": false, "short_desc": "Successful ranging ratio with anchor 5 [%]. ", "type": "LOG_UINT8", "desc": ""}, "rangingPerSec5": {"core": false, "short_desc": "Ranging attempt rate with anchor 5 [1/s]. ", "type": "LOG_UINT8", "desc": ""}}}, "ukf": {"desc": "Log groups different rates for the UKF (experimental) ", "variables": {"rtUpdate": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "rtPred": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "rtBaro": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "rtFinal": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "rtApnd": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}, "rtRej": {"core": false, "short_desc": "", "type": "LOG_FLOAT", "desc": ""}}}, "usd": {"desc": "Micro-SD related log variables for debug purposes mainly. ", "variables": {"spiWrBps": {"core": false, "short_desc": "SPI write rate (includes overhead) [bytes/s]. ", "type": "LOG_FLOAT", "desc": ""}, "spiReBps": {"core": false, "short_desc": "SPI read rate (includes overhead) [bytes/s]. ", "type": "LOG_FLOAT", "desc": ""}, "fatWrBps": {"core": false, "short_desc": "Data write rate to the SD card [bytes/s]. ", "type": "LOG_FLOAT", "desc": ""}}}}}